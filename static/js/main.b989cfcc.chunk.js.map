{"version":3,"sources":["constants/index.js","assets/weather-icon-512.png","components/Header.js","api/api.js","utils/index.js","utils/mapData.js","api/index.js","store/actions/actionTypes.js","store/actions/cityWeather.js","components/common/Loader.js","components/common/Error.js","components/hoc/WithLoadAndErrorHandler.js","components/Home/SearchField.js","store/actions/citiesAC.js","components/Home/CurrentWeather.js","components/common/Temperature.js","components/Home/DayForecast.js","components/Home/Forecast.js","components/Favorites/FavoritesBtn.js","store/actions/favorites.js","components/Home/CityWeather.js","components/Home/Home.js","components/Favorites/Favorite.js","components/Favorites/Favorites.js","components/Main.js","store/actions/units.js","components/UnitsBtn.js","App.js","serviceWorker.js","store/reducers/citiesAC.js","store/reducers/favorites.js","store/reducers/cityWeather.js","store/reducers/units.js","store/reducers/index.js","index.js"],"names":["FAHRENHEIT","CELSIUS","DAYS","APP_NAME","DEFAULT_CITY","city","country","id","withRouter","props","location","Navbar","className","Brand","href","target","src","logo","style","width","height","alt","Toggle","aria-controls","Collapse","Nav","activeKey","pathname","to","Link","cities","axios","create","baseURL","currentConditions","fiveDaysForecast","getCityByLatLon","roundTemperature","temperature","Math","round","getWeatherIconSrc","icon","getDayOfTheWeek","date","d","Date","getDay","calculateTemperature","units","getLatLon","a","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","loadState","serializedState","localStorage","getItem","JSON","parse","mapCity","Key","LocalizedName","Country","mapCitiesAC","map","mapForecast","forecast","f","min","Temperature","Minimum","Value","max","Maximum","dayIcon","Day","Icon","dayText","IconPhrase","mapCityWeather","currentWeather","LocalObservationDateTime","isDayTime","IsDayTime","Metric","WeatherIcon","text","WeatherText","DailyForecasts","API_KEY","process","_getCurrentWeather","require","cityId","api","get","_getFiveDaysForecast","getCityWeather","all","getCitiesAC","input","lat","lon","data","console","log","FETCH_CITY_WEATHER","FETCH_CITY_WEATHER_SUCCESS","FETCH_CITY_WEATHER_FAILURE","FETCH_CITIES_AC","FETCH_CITIES_AC_SUCCESS","FETCH_CITIES_AC_FAILURE","RESET_CITIES_AC","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_FAVORITE_TO_CITY_WEATHER","SET_FAHRENHEIT","SET_CELSIUS","fetchCityWeather","dispatch","type","payload","Loader","Spinner","animation","variant","Error","message","WithLoadAndErrorHandler","state","isLoading","children","SearchField","useState","setInput","formInput","useRef","citiesAC","useSelector","useDispatch","useEffect","current","focus","fetchCitiesAC","Form","InputGroup","Prepend","Text","Control","placeholder","onChange","e","setTimeout","value","ref","outline","boxShadow","length","as","multiple","zIndex","c","cursor","stringify","CurrentWeather","cityWeather","weather","Row","fontSize","DayForecast","Card","border","Body","Title","Img","Forecast","CardGroup","i","FavoritesBtn","favorites","isFavorite","some","onClick","addToFavorites","CityWeather","Container","Home","Favorite","favorite","setFavoriteToCityWeather","Favorites","Routes","exact","path","component","setUnits","setItem","saveState","UnitsBtn","App","init","maxWidth","Main","Boolean","window","hostname","match","initialState","action","filter","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b989cfcc.chunk.js","sourcesContent":["export const FAHRENHEIT = 'FAHRENHEIT';\nexport const CELSIUS = 'CELSIUS';\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const WEBSITE_URL = 'https://github.com/liorho/Lior-Hoshea-20-05-2020'\nexport const APP_NAME = \"weatherly\"\nexport const DEFAULT_CITY = { city: 'Tel Aviv', country: 'Israel', id: '215854' }","export default __webpack_public_path__ + \"static/media/weather-icon-512.db9f65c0.png\";","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport {WEBSITE_URL} from '../constants'\nimport logo from '../assets/weather-icon-512.png';\n\nfunction Header(props) {\n  const { location } = props;\n\n  return (\n    <Navbar className='mx-auto sticky-top bg-white' >\n      <Navbar.Brand href={WEBSITE_URL} target='_blank' className=\"logo\">\n        <img src={logo} style={{width: \"2rem\", height: \"2rem\"}} className='d-inline-block align-top' alt='Weatherly logo' /> Weatherly\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav' />\n      <Nav activeKey={location.pathname} className='ml-auto'>\n        <LinkContainer to='/home'>\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to='/favorites'>\n          <Nav.Link>Favorites</Nav.Link>\n        </LinkContainer>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","import axios from 'axios'\n\nexport const cities = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities',\n})\n\nexport const currentConditions = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/currentconditions/v1',\n})\n\nexport const fiveDaysForecast = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/forecasts/v1/daily/5day',\n})\n\nexport const getCityByLatLon = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities/geoposition',\n})","import { DAYS, CELSIUS, APP_NAME } from '../constants';\n\nexport const roundTemperature = (temperature) => Math.round(temperature);\n\nexport const getWeatherIconSrc = (icon) => `https://developer.accuweather.com/sites/default/files/${icon >= 10 ? icon : '0' + icon}-s.png`;\n\nexport const getDayOfTheWeek = (date) => {\n  const d = new Date(date);\n  return DAYS[d.getDay()];\n};\n\nexport const calculateTemperature = (temperature, units) => (units === CELSIUS ? temperature : roundTemperature((temperature * 9) / 5 + 32));\n\nexport const getLatLon = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        resolve([position.coords.latitude, position.coords.longitude]);\n      });\n    } else {\n      reject({ error: 'Geolocation is not supported by this browser.' });\n    }\n  });\n};\n\nexport const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem(APP_NAME);\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(APP_NAME, serializedState);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { roundTemperature } from './index'\n\nexport const mapCity = (city) => {\n  return { id: city.Key, city: city.LocalizedName, country: city.Country.LocalizedName }\n}\n\nexport const mapCitiesAC = (cities) =>\n  cities.map(mapCity);\n\n\nconst mapCurrentConditions = (currentWeather) => {\n  return {\n    date: currentWeather.LocalObservationDateTime,\n    isDayTime: currentWeather.IsDayTime,\n    temperature: roundTemperature(currentWeather.Temperature.Metric.Value),\n    icon: currentWeather.WeatherIcon,\n    text: currentWeather.WeatherText\n  }\n}\n\nconst mapForecast = (forecast) => {\n  return forecast.map(f => {\n    return {\n      date: f.Date,\n      temperature: {\n        min: roundTemperature(f.Temperature.Minimum.Value),\n        max: roundTemperature(f.Temperature.Maximum.Value),\n      },\n      dayIcon: f.Day.Icon,\n      dayText: f.Day.IconPhrase\n  }})\n}\n\nexport const mapCityWeather = (currentConditions, forecast) => {\n  return {\n    currentConditions: mapCurrentConditions(currentConditions),\n    forecast: mapForecast(forecast.DailyForecasts)\n  }\n}\n","import * as api from './api';\nimport { mapCity } from '../utils/mapData';\nimport { getLatLon } from '../utils';\n\nimport { DEFAULT_CITY } from '../constants';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst NODE_ENV = process.env.REACT_APP_NODE_ENV;\n\n// Dummy Data -->\nconst dummyTelAutoComplete = require('../data-samples/telAutoComplete.json');\nconst dummyTelAvivCurrent = require('../data-samples/telAvivCurrent.json');\nconst dummyTelAvivForecast = require('../data-samples/telAvivForecast.json');\n// <--\n\nconst _getCurrentWeather = (cityId) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAvivCurrent } : api.currentConditions.get(`/${cityId}?apikey=${API_KEY}`);\n};\nconst _getFiveDaysForecast = (cityId) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAvivForecast } : api.fiveDaysForecast.get(`/${cityId}?apikey=${API_KEY}&metric=true`);\n};\nexport const getCityWeather = async (cityId) => await Promise.all([_getCurrentWeather(cityId), _getFiveDaysForecast(cityId)]);\n\nexport const getCitiesAC = async (input) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAutoComplete } : await api.cities.get(`autocomplete?apikey=${API_KEY}&q=${input}`);\n};\nexport const getCityByLatLon = async () => {\n  if (NODE_ENV === 'DEVELOPMENT') {\n    return DEFAULT_CITY;\n  } else {\n    try {\n      const [lat, lon] = await getLatLon();\n      const { data } = await api.getCityByLatLon.get(`search?apikey=${API_KEY}&q=${lat},${lon}`);\n      return mapCity(data);\n    } catch (error) {\n      console.log(error);\n      return DEFAULT_CITY;\n    }\n  }\n};\n","export const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER'\nexport const FETCH_CITY_WEATHER_SUCCESS = 'FETCH_CITY_WEATHER_SUCCESS'\nexport const FETCH_CITY_WEATHER_FAILURE = 'FETCH_CITY_WEATHER_FAILURE'\n\nexport const FETCH_CITIES_AC = 'FETCH_CITIES_AC'\nexport const FETCH_CITIES_AC_SUCCESS = 'FETCH_CITIES_AC_SUCCESS'\nexport const FETCH_CITIES_AC_FAILURE = 'FETCH_CITIES_AC_FAILURE'\nexport const RESET_CITIES_AC = 'RESET_CITIES_AC'\n\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES'\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES'\n\nexport const SET_FAVORITE_TO_CITY_WEATHER = 'SET_FAVORITE_TO_CITY_WEATHER'\n\nexport const SET_FAHRENHEIT = 'SET_FAHRENHEIT'\nexport const SET_CELSIUS = 'SET_CELSIUS'\n\n\n","import * as api from '../../api';\nimport { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from './actionTypes';\nimport { mapCityWeather } from '../../utils/mapData';\n\nexport const fetchCityWeather = ({id, city, country}) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITY_WEATHER,\n  });\n  try {\n    const [currentConditions, fiveDaysForecast] = await api.getCityWeather(id);\n    dispatch({\n      type: FETCH_CITY_WEATHER_SUCCESS,\n      payload: { ...mapCityWeather(currentConditions.data[0], fiveDaysForecast.data), id, city, country },\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITY_WEATHER_FAILURE,\n      payload: error,\n    });\n  }\n};\n\nexport const setFavoriteToCityWeather = (city) => (dispatch) =>\n  dispatch({\n    type: SET_FAVORITE_TO_CITY_WEATHER,\n    payload: city,\n  });\n","import React from 'react';\nimport {Spinner} from 'react-bootstrap'\n\nconst Loader = () => <Spinner className=\"d-flex mx-auto justify-content-center m-3\" animation=\"border\" variant=\"secondary\" />\n\nexport default Loader;\n","import React from 'react';\n\nfunction Error(props) {\n  const { message, api } = props;\n  return <p>Error: {message}. Please try again later.</p>;\n}\n\nexport default Error;\n","import React from 'react';\nimport Loader from '../common/Loader';\nimport Error from '../common/Error';\n\nconst WithLoadAndErrorHandler = (props) => <>{props.state.error ? <Error message={props.state.error.message}/> : props.state.isLoading ? <Loader /> : props.children}</>;\n\nexport default WithLoadAndErrorHandler;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchCityWeather } from '../../store/actions/cityWeather';\nimport { fetchCitiesAC, resetCitiesAC } from '../../store/actions/citiesAC';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nconst DELAY = 800;\n\nfunction SearchField() {\n  const [input, setInput] = useState('');\n  const formInput = useRef('');\n  const citiesAC = useSelector((state) => state.citiesAC);\n  const dispatch = useDispatch();\n\n  const handleSelect = (e) => {\n    const city = JSON.parse(e.target.value);\n    dispatch(fetchCityWeather(city));\n    setInput('');\n    formInput.current.value = '';\n    dispatch(resetCitiesAC());\n  };\n\n  const handleChange = (e) => {\n    setTimeout(() => setInput(e.target.value), DELAY);\n  };\n\n  useEffect(() => formInput.current.focus(), [dispatch]);\n\n  useEffect(() => {\n    if (input !== '') dispatch(fetchCitiesAC(input));\n  }, [dispatch, input]);\n\n  return (\n    <Form className='justify-content-center w50 position-relative'>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>🔍</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control placeholder='Search City' onChange={handleChange} ref={formInput} style={{ outline: 'none !important', boxShadow: 'none' }} />\n      </InputGroup>\n\n      <WithLoadAndErrorHandler state={citiesAC}>\n        {citiesAC.cities?.length ? (\n          <Form.Control as='select' multiple onChange={handleSelect} className='position-absolute' style={{ zIndex: 1 }}>\n            {citiesAC.cities?.map((c) => (\n              <option style={{ cursor: 'pointer' }} key={c.id} value={JSON.stringify(c)}>\n                {c.city}, {c.country}\n              </option>\n            ))}\n          </Form.Control>\n        ) : (\n          ''\n        )}\n      </WithLoadAndErrorHandler>\n    </Form>\n  );\n}\n\nexport default SearchField;\n","import * as api from '../../api';\nimport { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from './actionTypes';\nimport { mapCitiesAC } from '../../utils/mapData';\n\nexport const fetchCitiesAC = (input) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITIES_AC,\n  });\n  try {\n    const { data } = await api.getCitiesAC(input);\n    dispatch({\n      type: FETCH_CITIES_AC_SUCCESS,\n      payload: mapCitiesAC(data),\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITIES_AC_FAILURE,\n      payload: error,\n    });\n  }\n};\n\nexport const resetCitiesAC = () => (dispatch) => dispatch({ type: RESET_CITIES_AC });\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport { calculateTemperature } from '../../utils'\n\nfunction CurrentWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const units = useSelector(state => state.units)\n\n  return (\n    <>\n      {cityWeather.weather.currentConditions ? (\n        <>\n            <Row className='justify-content-center'>{cityWeather.weather.currentConditions.text}</Row>\n            <Row className='justify-content-center' style={{fontSize: \"7rem\"}}>{calculateTemperature(cityWeather.weather.currentConditions.temperature, units)}°</Row>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {calculateTemperature} from '../../utils';\n\nfunction Temperature({ temperature }) {\n  const units = useSelector((state) => state.units);\n  return <span>{calculateTemperature(temperature, units)}°</span>;\n}\n\nexport default Temperature;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getWeatherIconSrc, getDayOfTheWeek } from '../../utils';\n\nimport Temperature from '../common/Temperature'\n\nfunction DayForecast({ forecast }) {\n  const { date, temperature, dayIcon } = forecast;\n\n  return (\n      <Card border=\"light\" className='text-center mx-1 day-forecast-card' >\n        <Card.Body className=\"day-forecast-card-body\">\n          <Card.Title className=\"day-forecast-card-item\">{getDayOfTheWeek(date)}</Card.Title>\n          <Card.Img style={{ width: \"6rem\" }} src={getWeatherIconSrc(dayIcon)} className=\"day-forecast-card-item\"></Card.Img>\n        <Card.Title className=\"day-forecast-card-item\">\n          <Temperature temperature={temperature?.min}/> - <Temperature temperature={temperature?.max}/>\n          </Card.Title>\n        </Card.Body>\n    </Card>\n  );\n}\n\nexport default DayForecast;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardGroup } from 'react-bootstrap';\n\nimport '../../styles/Forecast.style.css';\nimport DayForecast from './DayForecast';\n\nfunction Forecast() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather?.forecast ? (\n        <CardGroup className='forecast'>\n          {cityWeather.weather.forecast.map((f, i) => (\n            <DayForecast key={i} forecast={f} />\n          ))}\n        </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addToFavorites, removeFromFavorites } from '../../store/actions/favorites';\n\nconst FavoritesBtn = () => {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const favorites = useSelector((state) => state.favorites);\n  const dispatch = useDispatch();\n  const isFavorite = favorites?.some((f) => f.weather.id === cityWeather.weather.id);\n\n  const handleClick = () => {\n    isFavorite ? dispatch(removeFromFavorites(cityWeather)) : dispatch(addToFavorites(cityWeather));\n  };\n  return (\n    <div className='position-absolute top-0 end-0' style={{ cursor: 'pointer', fontSize: '3rem' }} onClick={handleClick}>\n      <i className={isFavorite ? 'fas fa-heart' : 'far fa-heart'}></i>\n    </div>\n  );\n};\nexport default FavoritesBtn;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from './actionTypes';\n\nexport const addToFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: city,\n  });\n\nexport const removeFromFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: REMOVE_FROM_FAVORITES,\n    payload: city,\n  });\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport FavoritesBtn from '../Favorites/FavoritesBtn';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nfunction CityWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <WithLoadAndErrorHandler state={cityWeather}>\n      {cityWeather.weather.currentConditions ? (\n        <Container className='position-relative mt-3'>\n          <Row className='h1 justify-content-center position-relative'>{cityWeather.weather.city}</Row>\n          <FavoritesBtn />\n          <CurrentWeather />\n          <Forecast />\n        </Container>\n      ) : (\n        ''\n      )}\n    </WithLoadAndErrorHandler>\n  );\n}\n\nexport default CityWeather;\n","import React from 'react';\n\nimport SearchField from './SearchField';\nimport CityWeather from './CityWeather';\n\nfunction Home() {\n  return (\n    <>\n      <SearchField />\n      <CityWeather />\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport { getWeatherIconSrc } from '../../utils';\nimport { setFavoriteToCityWeather } from '../../store/actions/cityWeather';\nimport Temperature from '../common/Temperature'\n\nfunction Favorite({ favorite }) {\n  const dispatch = useDispatch();\n\n  const {\n    weather: {\n      city,\n      country,\n      currentConditions: { temperature, icon },\n    },\n  } = favorite;\n\n  const handleClick = () => {\n    dispatch(setFavoriteToCityWeather(favorite.weather));\n  };\n\n  return (\n    <LinkContainer to='/home' style={{ cursor: 'pointer' }} onClick={handleClick}>\n      <Card border='light' className='text-center mx-1 favorite' style={{ 'minWidth': '150px', 'maxWidth': '200px' }}>\n        <Card.Body className=\"favorite-card-body\">\n          <Card.Title className=\"favorite-card-item\">{city}, {country}</Card.Title>\n          <Card.Img className=\"favorite-card-item\" style={{ width: 100 }} src={getWeatherIconSrc(icon)}></Card.Img>\n          <Card.Title className=\"favorite-card-item\"><Temperature temperature= {temperature} /></Card.Title>\n        </Card.Body>\n      </Card>\n    </LinkContainer>\n  );\n}\n\nexport default Favorite;\n","import React from 'react';\nimport Favorite from './Favorite';\nimport { useSelector } from 'react-redux';\nimport { CardGroup } from 'react-bootstrap';\n\nimport '../../styles/Favorites.style.css'\n\nfunction Favorites() {\n  const favorites = useSelector((state) => state.favorites);\n\n  return (\n    <>\n      {favorites.length ? (\n        <CardGroup className=\"favorites\">\n          {favorites.map((f) => (\n            <Favorite key={f.weather.id} favorite={f} />\n          ))}\n        </CardGroup>\n      ) : (\n      <h1 className=\"text-center\">\n        No Favorites Yet\n      </h1>\n\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nimport Home from './Home/Home';\nimport Favorites from './Favorites/Favorites';\n\nfunction Routes() {\n  return (\n    <Container style={{ 'maxWidth': '900px', \"marginTop\": \"1rem\" }}>\n      <Switch>\n        <Route exact path={'/home'} component={Home} />\n        <Route exact path='/favorites' component={Favorites} />\n        <Redirect to='/home' component={Home} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default Routes;\n","import { CELSIUS, FAHRENHEIT } from '../../constants'\nimport {SET_CELSIUS} from '../actions/actionTypes'\nimport {saveState} from '../../utils'\n\nexport const setUnits = (type) => (dispatch) => {\n  saveState({units: type === SET_CELSIUS ? CELSIUS : FAHRENHEIT})\n  dispatch({ type });\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CELSIUS, FAHRENHEIT } from '../constants';\nimport { setUnits } from '.././store/actions/units';\nimport { SET_FAHRENHEIT, SET_CELSIUS } from '.././store/actions/actionTypes';\n\nfunction UnitsBtn() {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const ToggleUnits = () => {\n    dispatch(setUnits(units === CELSIUS ? SET_FAHRENHEIT : SET_CELSIUS));\n  };\n\n  return (\n    <span onClick={ToggleUnits} style={{ cursor: 'pointer' }} className='p-1 position-absolute top-50 end-0 border'>\n      <span className={units === FAHRENHEIT ? 'text-muted' : ''}>°C</span>\n      <span className='text-muted'> / </span>\n      <span className={units === CELSIUS ? 'text-muted' : ''}>°F</span>\n    </span>\n  );\n}\n\nexport default UnitsBtn;\n","import React, { useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport UnitsBtn from './components/UnitsBtn';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchCityWeather } from '../src/store/actions/cityWeather';\nimport { getCityByLatLon } from './api';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const init = async () => dispatch(fetchCityWeather(await getCityByLatLon()));\n    init();\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <Container style={{ maxWidth: '1500px' }}>\n        <Header />\n        <Main />\n      </Container>\n      <UnitsBtn />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  cities: [],\n};\n\nconst citiesAC = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_AC:\n      return { ...state, isLoading: true };\n    case FETCH_CITIES_AC_SUCCESS:\n      return { isLoading: false, cities: action.payload, error: '' };\n    case FETCH_CITIES_AC_FAILURE:\n      return { isLoading: false, weather: [], error: action.payload };\n    case RESET_CITIES_AC:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default citiesAC;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from '../actions/actionTypes';\n\nconst favorites = (favorites = [], action) => {\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      return [...favorites, action.payload];\n    case REMOVE_FROM_FAVORITES:\n      return favorites.filter((f) => f.weather.id !== action.payload.weather.id);\n    default:\n      return favorites;\n  }\n};\n\nexport default favorites;\n","import { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  weather: {},\n};\n\nconst cityWeather = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITY_WEATHER:\n      return { ...state, isLoading: true };\n    case FETCH_CITY_WEATHER_SUCCESS:\n      return { isLoading: false, weather: action.payload, error: '' };\n    case FETCH_CITY_WEATHER_FAILURE:\n      return { isLoading: false, weather: {}, error: action.payload };\n    case SET_FAVORITE_TO_CITY_WEATHER:\n      return { isLoading: false, weather: action.payload, error: '' };\n    default:\n      return state;\n  }\n};\n\nexport default cityWeather;\n","import { SET_FAHRENHEIT, SET_CELSIUS } from '../actions/actionTypes';\nimport {FAHRENHEIT, CELSIUS } from '../../constants'\nimport {loadState} from '../../utils'\n\nconst initialState = loadState()?.units ? loadState().units : CELSIUS\n\nconst units = (units = initialState, action) => {\n  switch (action.type) {\n    case SET_CELSIUS:\n      return CELSIUS;\n    case SET_FAHRENHEIT:\n      return FAHRENHEIT;\n    default:\n      return units;\n  }\n};\nexport default units;\n","import { combineReducers } from 'redux'\n\nimport citiesAC from './citiesAC'\nimport favorites from './favorites'\nimport cityWeather from './cityWeather'\nimport units from './units'\n\n\nexport default combineReducers({\n    cityWeather,\n    favorites,\n    citiesAC,\n    units,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './store/reducers';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}