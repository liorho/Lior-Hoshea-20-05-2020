{"version":3,"sources":["assets/weather-icon-512.png","components/Header.js","store/actions/actionTypes.js","store/api/api.js","store/utils/mapCityWeather.js","store/actions/cityWeather.js","store/utils/mapCitiesAC.js","store/actions/citiesAC.js","components/common/Loader.js","components/common/Error.js","components/hoc/WithLoadAndErrorHandler.js","components/Home/SearchField.js","utils/index.js","components/Home/CurrentWeather.js","components/Home/DayForecast.js","components/Home/Forecast.js","components/Home/CityWeather.js","store/actions/favorites.js","components/Home/Home.js","components/Favorites/Favorite.js","components/Favorites/Favorites.js","components/Routes.js","App.js","serviceWorker.js","store/reducers/citiesAC.js","store/reducers/favorites.js","store/reducers/cityWeather.js","store/reducers/index.js","index.js"],"names":["withRouter","props","location","Navbar","Brand","href","target","src","logo","width","height","className","alt","Nav","activeKey","pathname","to","Link","FETCH_CITY_WEATHER","axios","create","baseURL","FETCH_CITY_WEATHER_SUCCESS","FETCH_CITY_WEATHER_FAILURE","FETCH_CITIES_AC","FETCH_CITIES_AC_SUCCESS","FETCH_CITIES_AC_FAILURE","RESET_CITIES_AC","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_FAVORITE_TO_CITY_WEATHER","roundTemperature","temperature","Math","round","mapForecast","forecast","map","f","date","Date","min","Temperature","Minimum","Value","max","Maximum","dayIcon","Day","Icon","dayText","IconPhrase","mapCityWeather","currentConditions","currentWeather","LocalObservationDateTime","isDayTime","IsDayTime","Metric","icon","WeatherIcon","text","WeatherText","DailyForecasts","dummyCurrentConditions","require","dummyForecast","mapCitiesAC","cities","c","id","Key","city","LocalizedName","country","Country","dummyCities","Loader","Spinner","animation","variant","Error","WithLoadAndErrorHandler","state","error","isLoading","children","SearchField","useState","input","setInput","formInput","useRef","citiesAC","useSelector","dispatch","useDispatch","useEffect","ReactDOM","findDOMNode","current","focus","a","type","payload","console","log","message","Form","InputGroup","Prepend","Text","Control","placeholder","onChange","e","setTimeout","value","ref","length","as","multiple","JSON","parse","fetchCityWeather","stringify","getWeatherIconSrc","getDayOfTheWeek","getDay","CurrentWeather","cityWeather","weather","Card","Img","style","Body","Title","DayForecast","ImgOverlay","Forecast","CardGroup","i","CityWeather","favorites","isFavorite","some","Button","onClick","addToFavorites","Home","Favorite","favorite","cursor","setFavoriteToCityWeather","Favorites","Routes","exact","path","component","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","initialState","action","filter","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7cd2d288.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/weather-icon-512.db9f65c0.png\";","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { withRouter } from 'react-router';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport logo from '../assets/weather-icon-512.png';\n\nfunction Header(props) {\n  const { location } = props;\n  return (\n    <Navbar >\n      <Navbar.Brand href='https://github.com/liorho/Lior-Hoshea-20-05-2020' target='_blank'>\n        <img src={logo} width='30' height='30' className='d-inline-block align-top' alt='Weatherly logo' /> Weatherly\n      </Navbar.Brand>\n      <Nav activeKey={location.pathname}>\n        <LinkContainer to='/home'>\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to='/favorites'>\n          <Nav.Link>Favorites</Nav.Link>\n        </LinkContainer>\n      </Nav>\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","export const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER'\nexport const FETCH_CITY_WEATHER_SUCCESS = 'FETCH_CITY_WEATHER_SUCCESS'\nexport const FETCH_CITY_WEATHER_FAILURE = 'FETCH_CITY_WEATHER_FAILURE'\n\nexport const FETCH_CITIES_AC = 'FETCH_CITIES_AC'\nexport const FETCH_CITIES_AC_SUCCESS = 'FETCH_CITIES_AC_SUCCESS'\nexport const FETCH_CITIES_AC_FAILURE = 'FETCH_CITIES_AC_FAILURE'\nexport const RESET_CITIES_AC = 'RESET_CITIES_AC'\n\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES'\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES'\n\nexport const SET_FAVORITE_TO_CITY_WEATHER = 'SET_FAVORITE_TO_CITY_WEATHER'\n\n\n","import axios from 'axios'\n\nexport const cities = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/locations/v1/cities',\n})\n\nexport const currentConditions = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/currentconditions/v1',\n})\n\nexport const fiveDaysForecast = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/forecasts/v1/daily/5day',\n})","const roundTemperature = (temperature) => Math.round(temperature)\n\nconst mapCurrentConditions = (currentWeather) => {\n  return {\n    date: currentWeather.LocalObservationDateTime,\n    isDayTime: currentWeather.IsDayTime,\n    temperature: roundTemperature(currentWeather.Temperature.Metric.Value),\n    icon: currentWeather.WeatherIcon,\n    text: currentWeather.WeatherText\n  }\n}\n\nconst mapForecast = (forecast) => {\n  return forecast.map(f => {\n    return {\n      date: f.Date,\n      temperature: {\n        min: roundTemperature(f.Temperature.Minimum.Value),\n        max: roundTemperature(f.Temperature.Maximum.Value),\n      },\n      dayIcon: f.Day.Icon,\n      dayText: f.Day.IconPhrase\n  }})\n}\n\nexport const mapCityWeather = (currentConditions, forecast) => {\n  return {\n    currentConditions: mapCurrentConditions(currentConditions),\n    forecast: mapForecast(forecast.DailyForecasts)\n  }\n}\n","import * as api from '../api';\nimport { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from './actionTypes';\nimport { mapCityWeather } from '../utils/mapCityWeather';\n\n// dummy\nlet dummyCurrentConditions = require('../../data-samples/telAvivCurrent.json');\nconst dummyForecast = require('../../data-samples/telAvivForecast.json');\ndummyCurrentConditions = dummyCurrentConditions[0];\n// dummy\n\nexport const fetchCityWeather = (id, city, country) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITY_WEATHER,\n  });\n  try {\n    // const [currentConditions, fiveDaysForecast] = await api.getCityWeather(id);\n    dispatch({\n      type: FETCH_CITY_WEATHER_SUCCESS,\n      // payload: { ...mapCityWeather(currentConditions.data[0], fiveDaysForecast.data), id, city, country },\n\n      // dummy:\n      payload: { ...mapCityWeather(dummyCurrentConditions, dummyForecast), id, city, country },\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITY_WEATHER_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const setFavoriteToCityWeather = (city) => (dispatch) =>\n  dispatch({\n    type: SET_FAVORITE_TO_CITY_WEATHER,\n    payload: city,\n  });\n","export const mapCitiesAC = (cities) =>\n  cities.map((c) => {\n    return { id: c.Key, city: c.LocalizedName, country: c.Country.LocalizedName };\n  });\n","import * as api from '../api';\nimport { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from './actionTypes';\nimport { mapCitiesAC } from '../utils/mapCitiesAC';\nconst dummyCities = require('../../data-samples/telAutoComplete.json');\n\nexport const fetchCitiesAC = (input) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITIES_AC,\n  });\n  try {\n    // const {data} = await api.getCitiesAC(input);\n    const data = dummyCities;\n    dispatch({\n      type: FETCH_CITIES_AC_SUCCESS,\n      payload: mapCitiesAC(data),\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITIES_AC_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const resetCitiesAC = () => (dispatch) => dispatch({ type: RESET_CITIES_AC });\n","import React from 'react';\nimport {Spinner} from 'react-bootstrap'\n\nconst Loader = () => <Spinner className=\"mx-auto\" animation=\"border\" variant=\"secondary\" />\n\nexport default Loader;\n","import React from 'react';\n\nfunction Error() {\n  return (\n    <div>\n      <div>There has been some kind of problem while trying to handle your request.</div>\n      <div>Please try again later.</div>\n    </div>\n  );\n}\n\nexport default Error;\n","import React from 'react';\nimport Loader from '../common/Loader';\nimport Error from '../common/Error';\n\nconst WithLoadAndErrorHandler = (props) => <>{props.state.error ? <Error /> : props.state.isLoading ? <Loader /> : props.children}</>;\n\nexport default WithLoadAndErrorHandler;\n","import React, { useState, useEffect, useRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\n\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCityWeather } from '../../store/actions/cityWeather';\nimport { fetchCitiesAC, resetCitiesAC } from '../../store/actions/citiesAC';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nconst DELAY = 1000;\n\nfunction SearchField() {\n  const [input, setInput] = useState('');\n  const formInput = useRef('');\n  const citiesAC = useSelector((state) => state.citiesAC);\n  const dispatch = useDispatch();\n\n  const handleSelect = (e) => {\n    const { id, city, country } = JSON.parse(e.target.value);\n    dispatch(fetchCityWeather(id, city, country));\n    setInput('');\n    ReactDOM.findDOMNode(formInput.current).value = '';\n    dispatch(resetCitiesAC());\n  };\n\n  const handleChange = (e) => {\n    setTimeout(() => setInput(e.target.value), DELAY);\n  };\n\n  useEffect(() => ReactDOM.findDOMNode(formInput.current).focus(), []);\n\n  useEffect(() => {\n    if (input !== '') dispatch(fetchCitiesAC(input));\n  }, [input]);\n\n  return (\n    <Form>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>🔍</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control placeholder='Search City' onChange={handleChange} ref={formInput} />\n      </InputGroup>\n      <WithLoadAndErrorHandler state={citiesAC}>\n        {citiesAC.cities.length ? (\n          <Form.Control as='select' multiple onChange={handleSelect}>\n            {citiesAC.cities?.map((c) => (\n              <option key={c.id} value={JSON.stringify(c)}>\n                {c.city}, {c.country}\n              </option>\n            ))}\n          </Form.Control>\n        ) : (\n          ''\n        )}\n      </WithLoadAndErrorHandler>\n    </Form>\n  );\n}\n\nexport default SearchField;\n","export const getWeatherIconSrc = (icon) => `https://developer.accuweather.com/sites/default/files/${icon >= 10 ? icon : '0' + icon}-s.png`;\n\nexport const getCityPicSrc = (cityName) => `https://api.teleport.org/api/urban_areas/slug:${cityName}/images`;\n\nexport const getDayOfTheWeek = (date) => {\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const d = new Date(date);\n  return days[d.getDay()];\n};\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getWeatherIconSrc } from '../../utils';\nimport { useSelector } from 'react-redux';\n\nfunction CurrentWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather.currentConditions ? (\n        <>\n          <Card.Img style={{ width: 100 }} src={getWeatherIconSrc(cityWeather.weather.currentConditions.icon)}></Card.Img>\n          <Card.Body>\n            <Card.Title>{cityWeather.weather.currentConditions.text}</Card.Title>\n            <Card.Text>{cityWeather.weather.currentConditions.temperature}°</Card.Text>\n\n          </Card.Body>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getWeatherIconSrc, getDayOfTheWeek } from '../../utils';\n\nfunction DayForecast({forecast}) {\n  const { date, temperature, dayIcon, dayText } = forecast\n  return (\n    <Card>\n      <Card.Img style={{ width: 300 }} src={getWeatherIconSrc(dayIcon)}></Card.Img>\n      <Card.ImgOverlay>\n      <Card.Body>\n        <Card.Title>{getDayOfTheWeek(date)}</Card.Title>\n        <Card.Title>{dayText}</Card.Title>\n        <Card.Text>\n          {temperature?.min}° - {temperature?.max}°\n        </Card.Text>\n        </Card.Body>\n        </Card.ImgOverlay>\n    </Card>\n  );\n}\n\nexport default DayForecast;\n","import React from 'react';\nimport DayForecast from './DayForecast';\nimport { useSelector } from 'react-redux';\nimport { CardGroup } from 'react-bootstrap';\n\nfunction Forecast() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  return (\n    <>\n      {cityWeather.weather?.forecast ? (\n        <CardGroup>\n          {cityWeather.weather.forecast.map((f, i) => (\n            <DayForecast key={i} forecast={f} />\n          ))}\n        </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\nimport { Card, Button } from 'react-bootstrap';\nimport {addToFavorites, removeFromFavorites} from '../../store/actions/favorites'\n\nfunction CityWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const favorites = useSelector(state => state.favorites)\n  const dispatch = useDispatch()\n  const isFavorite = favorites?.some(f => f.weather.id === cityWeather.weather.id)\n\n  const handleClick = () => {\n    isFavorite ?\n      dispatch(removeFromFavorites(cityWeather)) :\n      dispatch(addToFavorites(cityWeather))\n\n  }\n  return (\n    <WithLoadAndErrorHandler state={cityWeather}>\n      {cityWeather.weather.currentConditions ? (\n        <Card>\n          <Card.Title>{cityWeather.weather.city}</Card.Title>\n          <Button onClick={handleClick}>{isFavorite? \"Remove From Favorites\": \"Add to Favorites\" }</Button>\n          <CurrentWeather />\n          <Forecast />\n        </Card>\n      ) : (\n        ''\n      )}\n    </WithLoadAndErrorHandler>\n  );\n}\n\nexport default CityWeather;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from './actionTypes';\n\nexport const addToFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: city,\n  });\n\nexport const removeFromFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: REMOVE_FROM_FAVORITES,\n    payload: city,\n  });\n","import React from 'react'\nimport SearchField from './SearchField'\nimport CityWeather from './CityWeather'\n\n\nfunction Home() {\n  return <>\n      <SearchField/>\n      <CityWeather/>\n    </>\n}\n\nexport default Home\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getWeatherIconSrc } from '../../utils';\nimport { setFavoriteToCityWeather } from '../../store/actions/cityWeather';\nimport { useDispatch } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Link } from 'react-router-dom';\n\nfunction Favorite({ favorite }) {\n  const {\n    weather: {\n      id,\n      city,\n      currentConditions: { temperature, icon, text },\n    },\n  } = favorite;\n  const dispatch = useDispatch();\n  const handleClick = () => {\n    dispatch(setFavoriteToCityWeather(favorite.weather));\n  };\n  return (\n    <LinkContainer to='/home' style={{ cursor: 'pointer' }} onClick={handleClick}>\n      <Card >\n        <Card.Img style={{ width: 300 }} src={getWeatherIconSrc(icon)}></Card.Img>\n        <Card.ImgOverlay>\n          <Card.Body>\n            <Card.Title>{city}</Card.Title>\n            <Card.Title>{text}</Card.Title>\n            <Card.Text>{temperature}°</Card.Text>\n          </Card.Body>\n        </Card.ImgOverlay>\n      </Card>\n    </LinkContainer>\n  );\n}\n\nexport default Favorite;\n","import React from 'react';\nimport Favorite from './Favorite';\nimport { useSelector } from 'react-redux';\nimport {CardGroup} from 'react-bootstrap'\n\nfunction Favorites() {\n  const favorites = useSelector((state) => state.favorites);\n  return (\n    < >\n      {favorites.length ? (\n        <CardGroup>\n          {favorites.map((f) => (\n            <Favorite key={f.weather.id} favorite={f} />\n          ))}\n        </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport Home from './Home/Home'\nimport Favorites from './Favorites/Favorites'\n\nfunction Routes() {\n  return (\n    <Switch>\n      <Route exact path={'/home'} component={Home} />\n      <Route exact path='/favorites' component={Favorites} />\n      <Redirect to=\"/home\" component={Home} />\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport Header from './components/Header';\nimport Routes from './components/Routes';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCityWeather } from '../src/store/actions/cityWeather'\n// import Loader from '../src/components/common/Loader'\n// import Error from '../src/components/common/Error'\nfunction App() {\n  const dispatch = useDispatch();\n  const cityWeather = useSelector(state => state.cityWeather)\n  useEffect(() => {\n    // dispatch(fetchCityWeather(cityWeather.id));\n  }, []);\n\n  return (\n    <Router>\n    {/* <Loader/> */}\n      <Header />\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  cities: [],\n};\n\nconst citiesAC = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_AC:\n      return { ...state, isLoading: true };\n    case FETCH_CITIES_AC_SUCCESS:\n      return { isLoading: false, cities: action.payload, error: '' };\n    case FETCH_CITIES_AC_FAILURE:\n      return { isLoading: false, weather: [], error: action.payload };\n    case RESET_CITIES_AC:\n      return initialState\n    default:\n      return state;\n  }\n};\n\nexport default citiesAC;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from '../actions/actionTypes';\n\nconst favorites = (favorites = [], action) => {\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      return [...favorites, action.payload] ;\n    case REMOVE_FROM_FAVORITES:\n      return favorites.filter(f => f.weather.id !== action.payload.weather.id)\n    default:\n      return favorites;\n  }\n};\n\nexport default favorites;\n","import { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  weather: { city: 'Tel Aviv', country: 'Israel', id: '215854' },\n};\n\nconst cityWeather = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITY_WEATHER:\n      return { ...state, isLoading: true };\n    case FETCH_CITY_WEATHER_SUCCESS:\n      return { isLoading: false, weather: action.payload, error: '' };\n    case FETCH_CITY_WEATHER_FAILURE:\n      return { isLoading: false, weather: {}, error: action.payload };\n    case SET_FAVORITE_TO_CITY_WEATHER:\n      return { isLoading: false, weather: action.payload, error: '' };\n    default:\n      return state;\n  }\n};\n\nexport default cityWeather;\n","import { combineReducers } from 'redux'\n\nimport citiesAC from './citiesAC'\nimport favorites from './favorites'\nimport cityWeather from './cityWeather'\n\nexport default combineReducers({\n    cityWeather,\n    favorites,\n    citiesAC,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport reducers from './store/reducers'\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n</Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register()\n"],"sourceRoot":""}