{"version":3,"sources":["constants/index.js","assets/weather-icon-512.png","components/Header.js","store/api/api.js","store/utils/mapCitiesAC.js","store/api/index.js","store/actions/actionTypes.js","utils/index.js","store/utils/mapCityWeather.js","store/actions/cityWeather.js","components/common/Loader.js","components/common/Error.js","components/hoc/WithLoadAndErrorHandler.js","components/Home/SearchField.js","store/actions/citiesAC.js","components/Home/CurrentWeather.js","components/Home/DayForecast.js","components/Home/Forecast.js","components/Favorites/FavoritesBtn.js","store/actions/favorites.js","components/Home/CityWeather.js","components/Home/Home.js","components/Favorites/Favorite.js","components/Favorites/Favorites.js","components/Main.js","components/UnitsBtn.js","store/actions/units.js","App.js","serviceWorker.js","store/reducers/citiesAC.js","store/reducers/favorites.js","store/reducers/cityWeather.js","store/reducers/units.js","store/reducers/index.js","index.js"],"names":["FAHRENHEIT","CELSIUS","DAYS","withRouter","props","location","Navbar","className","style","Brand","href","target","src","logo","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","activeKey","pathname","to","Link","cities","axios","create","baseURL","currentConditions","fiveDaysForecast","getCityByLatLon","mapCity","city","Key","LocalizedName","country","Country","mapCitiesAC","map","API_KEY","process","_getCurrentWeather","cityId","api","get","_getFiveDaysForecast","getCityWeather","a","Promise","all","getCitiesAC","input","lat","lon","data","console","log","FETCH_CITY_WEATHER","FETCH_CITY_WEATHER_SUCCESS","FETCH_CITY_WEATHER_FAILURE","FETCH_CITIES_AC","FETCH_CITIES_AC_SUCCESS","FETCH_CITIES_AC_FAILURE","RESET_CITIES_AC","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_FAVORITE_TO_CITY_WEATHER","SET_FAHRENHEIT","SET_CELSIUS","roundTemperature","temperature","Math","round","getWeatherIconSrc","icon","getDayOfTheWeek","date","d","Date","getDay","calculateTemperature","units","getLatLon","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","mapForecast","forecast","f","min","Temperature","Minimum","Value","max","Maximum","dayIcon","Day","Icon","dayText","IconPhrase","mapCityWeather","currentWeather","LocalObservationDateTime","isDayTime","IsDayTime","Metric","WeatherIcon","text","WeatherText","DailyForecasts","dummyCurrentConditions","require","fetchCityWeather","dispatch","type","payload","message","Loader","Spinner","animation","variant","Error","Jumbotron","WithLoadAndErrorHandler","state","isLoading","children","SearchField","useState","setInput","formInput","useRef","citiesAC","useSelector","useDispatch","useEffect","current","focus","fetchCitiesAC","Form","InputGroup","Prepend","Text","Control","placeholder","onChange","e","setTimeout","value","ref","outline","length","as","multiple","JSON","parse","c","stringify","CurrentWeather","cityWeather","weather","Row","fontSize","DayForecast","Card","border","Body","Title","Img","Forecast","CardGroup","i","FavoritesBtn","favorites","isFavorite","some","cursor","onClick","addToFavorites","CityWeather","Container","Home","Favorite","favorite","setFavoriteToCityWeather","Favorites","Routes","exact","path","component","UnitsBtn","App","init","Main","Boolean","window","hostname","match","initialState","action","filter","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b72f001.chunk.js","sourcesContent":["export const FAHRENHEIT = 'FAHRENHEIT';\nexport const CELSIUS = 'CELSIUS';\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const WEBSITE_URL = 'https://github.com/liorho/Lior-Hoshea-20-05-2020'","export default __webpack_public_path__ + \"static/media/weather-icon-512.db9f65c0.png\";","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport {WEBSITE_URL} from '../constants'\nimport logo from '../assets/weather-icon-512.png';\n\nfunction Header(props) {\n  const { location } = props;\n\n  return (\n    <Navbar className='mx-auto sticky-top' style={{\"backgroundColor\": \"white\"}}>\n      <Navbar.Brand href={WEBSITE_URL} target='_blank'>\n        <img src={logo} style={{width: \"2rem\", height: \"2rem\"}} className='d-inline-block align-top' alt='Weatherly logo' /> Weatherly\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav' />\n      <Nav activeKey={location.pathname} className='ml-auto'>\n        <LinkContainer to='/home'>\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to='/favorites'>\n          <Nav.Link>Favorites</Nav.Link>\n        </LinkContainer>\n      </Nav>\n    </Navbar>\n  );\n  // width='30' height='30'\n}\n\nexport default withRouter(Header);\n","import axios from 'axios'\n\nexport const cities = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities',\n})\n\nexport const currentConditions = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/currentconditions/v1',\n})\n\nexport const fiveDaysForecast = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/forecasts/v1/daily/5day',\n})\n\nexport const getCityByLatLon = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities/geoposition',\n})","export const mapCity = (city) => {\n  return { id: city.Key, city: city.LocalizedName, country: city.Country.LocalizedName }\n}\n\nexport const mapCitiesAC = (cities) =>\n  cities.map(mapCity);\n","import * as api from './api';\nimport { mapCity } from '../utils/mapCitiesAC';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst _getCurrentWeather = (cityId) => api.currentConditions.get(`/${cityId}?apikey=${API_KEY}`);\n\nconst _getFiveDaysForecast = (cityId) => api.fiveDaysForecast.get(`/${cityId}?apikey=${API_KEY}&metric=true`);\n\nexport const getCityWeather = async (cityId) => await Promise.all([_getCurrentWeather(cityId), _getFiveDaysForecast(cityId)]);\n\nexport const getCitiesAC = async (input) => await api.cities.get(`autocomplete?apikey=${API_KEY}&q=${input}`);\n\nexport const getCityByLatLon = async (lat, lon) => {\n  try {\n    const { data } = await api.getCityByLatLon.get(`search?apikey=${API_KEY}&q=${lat},${lon}`);\n    return mapCity(data);\n  } catch (error) {\n    console.log(error);\n    return { city: 'Tel Aviv', country: 'Israel', id: '215854' };\n  }\n};\n","export const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER'\nexport const FETCH_CITY_WEATHER_SUCCESS = 'FETCH_CITY_WEATHER_SUCCESS'\nexport const FETCH_CITY_WEATHER_FAILURE = 'FETCH_CITY_WEATHER_FAILURE'\n\nexport const FETCH_CITIES_AC = 'FETCH_CITIES_AC'\nexport const FETCH_CITIES_AC_SUCCESS = 'FETCH_CITIES_AC_SUCCESS'\nexport const FETCH_CITIES_AC_FAILURE = 'FETCH_CITIES_AC_FAILURE'\nexport const RESET_CITIES_AC = 'RESET_CITIES_AC'\n\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES'\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES'\n\nexport const SET_FAVORITE_TO_CITY_WEATHER = 'SET_FAVORITE_TO_CITY_WEATHER'\n\nexport const SET_FAHRENHEIT = 'SET_FAHRENHEIT'\nexport const SET_CELSIUS = 'SET_CELSIUS'\n\n\n","import { DAYS, CELSIUS } from '../constants';\n\nexport const roundTemperature = (temperature) => Math.round(temperature);\n\nexport const getWeatherIconSrc = (icon) => `https://developer.accuweather.com/sites/default/files/${icon >= 10 ? icon : '0' + icon}-s.png`;\n\n// export const getCityPicSrc = (cityName) => `https://api.teleport.org/api/urban_areas/slug:${cityName}/images`;\n\nexport const getDayOfTheWeek = (date) => {\n  const d = new Date(date);\n  return DAYS[d.getDay()];\n};\n\nexport const calculateTemperature = (temperature, units) => (units === CELSIUS ? temperature : roundTemperature((temperature * 9) / 5 + 32));\n\nexport const getLatLon = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        resolve([position.coords.latitude, position.coords.longitude]);\n      });\n    } else {\n      reject({ error: 'Geolocation is not supported by this browser.' });\n    }\n  });\n};\n","import {roundTemperature} from '../../utils'\n\nconst mapCurrentConditions = (currentWeather) => {\n  return {\n    date: currentWeather.LocalObservationDateTime,\n    isDayTime: currentWeather.IsDayTime,\n    temperature: roundTemperature(currentWeather.Temperature.Metric.Value),\n    icon: currentWeather.WeatherIcon,\n    text: currentWeather.WeatherText\n  }\n}\n\nconst mapForecast = (forecast) => {\n  return forecast.map(f => {\n    return {\n      date: f.Date,\n      temperature: {\n        min: roundTemperature(f.Temperature.Minimum.Value),\n        max: roundTemperature(f.Temperature.Maximum.Value),\n      },\n      dayIcon: f.Day.Icon,\n      dayText: f.Day.IconPhrase\n  }})\n}\n\nexport const mapCityWeather = (currentConditions, forecast) => {\n  return {\n    currentConditions: mapCurrentConditions(currentConditions),\n    forecast: mapForecast(forecast.DailyForecasts)\n  }\n}\n","import * as api from '../api';\nimport { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from './actionTypes';\nimport { mapCityWeather } from '../utils/mapCityWeather';\n\n// Dummy -->\nlet dummyCurrentConditions = require('../../data-samples/telAvivCurrent.json');\nconst dummyForecast = require('../../data-samples/telAvivForecast.json');\ndummyCurrentConditions = dummyCurrentConditions[0];\n// --> Dummy\n\nexport const fetchCityWeather = (id, city, country) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITY_WEATHER,\n  });\n  try {\n    const [currentConditions, fiveDaysForecast] = await api.getCityWeather(id);\n    dispatch({\n      type: FETCH_CITY_WEATHER_SUCCESS,\n      payload: { ...mapCityWeather(currentConditions.data[0], fiveDaysForecast.data), id, city, country },\n\n      // Dummy:\n      // payload: { ...mapCityWeather(dummyCurrentConditions, dummyForecast), id, city, country },\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITY_WEATHER_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const setFavoriteToCityWeather = (city) => (dispatch) =>\n  dispatch({\n    type: SET_FAVORITE_TO_CITY_WEATHER,\n    payload: city,\n  });\n","import React from 'react';\nimport {Spinner} from 'react-bootstrap'\n\nconst Loader = () => <Spinner className=\"mx-auto\" animation=\"border\" variant=\"secondary\" />\n\nexport default Loader;\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nfunction Error() {\n  return (\n    <Jumbotron>\n      <h1>This is an Error Message</h1>\n      <p>There has been some kind of problem while trying to handle your request.</p>\n      <p>Please try again later.</p>\n    </Jumbotron>\n  );\n}\n\nexport default Error;\n","import React from 'react';\nimport Loader from '../common/Loader';\nimport Error from '../common/Error';\n\nconst WithLoadAndErrorHandler = (props) => <>{props.state.error ? <Error /> : props.state.isLoading ? <Loader /> : props.children}</>;\n\nexport default WithLoadAndErrorHandler;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchCityWeather } from '../../store/actions/cityWeather';\nimport { fetchCitiesAC, resetCitiesAC } from '../../store/actions/citiesAC';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nconst DELAY = 800;\n\nfunction SearchField() {\n  const [input, setInput] = useState('');\n  const formInput = useRef('');\n  const citiesAC = useSelector((state) => state.citiesAC);\n  const dispatch = useDispatch();\n\n  const handleSelect = (e) => {\n    const { id, city, country } = JSON.parse(e.target.value);\n    dispatch(fetchCityWeather(id, city, country));\n    setInput('');\n    formInput.current.value = '';\n    dispatch(resetCitiesAC());\n  };\n\n  const handleChange = (e) => {\n    setTimeout(() => setInput(e.target.value), DELAY);\n  };\n\n  useEffect(() => formInput.current.focus(), [dispatch]);\n\n  useEffect(() => {\n    if (input !== '') dispatch(fetchCitiesAC(input));\n  }, [dispatch, input]);\n\n  return (\n    <Form className='justify-content-center w50'>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>🔍</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control placeholder='Search City' onChange={handleChange} ref={formInput} style={{ outline: 'none !important', 'boxShadow': 'none' }} />\n      </InputGroup>\n\n      <WithLoadAndErrorHandler state={citiesAC}>\n        {citiesAC.cities.length ? (\n          <Form.Control as='select' multiple onChange={handleSelect}>\n            {citiesAC.cities?.map((c) => (\n              <option key={c.id} value={JSON.stringify(c)}>\n                {c.city}, {c.country}\n              </option>\n            ))}\n          </Form.Control>\n        ) : (\n          ''\n        )}\n      </WithLoadAndErrorHandler>\n    </Form>\n  );\n}\n\nexport default SearchField;\n","import * as api from '../api';\nimport { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from './actionTypes';\nimport { mapCitiesAC } from '../utils/mapCitiesAC';\n\n// Dummy:\n// const dummyCities = require('../../data-samples/telAutoComplete.json');\n\nexport const fetchCitiesAC = (input) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITIES_AC,\n  });\n  try {\n    const { data } = await api.getCitiesAC(input);\n    // Dummy:\n    // const data = dummyCities;\n    dispatch({\n      type: FETCH_CITIES_AC_SUCCESS,\n      payload: mapCitiesAC(data),\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITIES_AC_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const resetCitiesAC = () => (dispatch) => dispatch({ type: RESET_CITIES_AC });\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport { calculateTemperature } from '../../utils'\n\nfunction CurrentWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const units = useSelector(state => state.units)\n\n  return (\n    <>\n      {cityWeather.weather.currentConditions ? (\n        <>\n            <Row className='justify-content-center'>{cityWeather.weather.currentConditions.text}</Row>\n            <Row className='justify-content-center' style={{fontSize: \"7rem\"}}>{calculateTemperature(cityWeather.weather.currentConditions.temperature, units)}°</Row>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { getWeatherIconSrc, getDayOfTheWeek, calculateTemperature } from '../../utils';\n\nfunction DayForecast({ forecast }) {\n  const { date, temperature, dayIcon, dayText } = forecast;\n  const units = useSelector((state) => state.units);\n\n  return (\n      <Card border=\"light\" className='text-center mx-1 day-forecast-card' >\n        <Card.Body className=\"day-forecast-card-body\">\n          <Card.Title className=\"day-forecast-card-item\">{getDayOfTheWeek(date)}</Card.Title>\n          <Card.Img style={{ width: \"6rem\" }} src={getWeatherIconSrc(dayIcon)} className=\"day-forecast-card-item\"></Card.Img>\n          <Card.Title className=\"day-forecast-card-item\">\n            {calculateTemperature(temperature?.min, units)}° - {calculateTemperature(temperature?.max, units)}°\n          </Card.Title>\n        </Card.Body>\n    </Card>\n  );\n}\n\nexport default DayForecast;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardGroup,Container, Row, CardDeck, CardColumns } from 'react-bootstrap';\n\nimport '../../styles/Forecast.style.css'\nimport DayForecast from './DayForecast';\n\nfunction Forecast() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather?.forecast ? (\n\n        <CardGroup className=\"forecast\">\n          {cityWeather.weather.forecast.map((f, i) => (\n            <DayForecast key={i} forecast={f} />\n          ))}\n          </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addToFavorites, removeFromFavorites } from '../../store/actions/favorites';\n\nconst FavoritesBtn = () => {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const favorites = useSelector((state) => state.favorites);\n  const dispatch = useDispatch();\n  const isFavorite = favorites?.some((f) => f.weather.id === cityWeather.weather.id);\n\n  const handleClick = () => {\n    isFavorite ? dispatch(removeFromFavorites(cityWeather)) : dispatch(addToFavorites(cityWeather));\n  };\n  return (\n    <div className='position-absolute top-0 end-0' style={{ cursor: 'pointer', fontSize: '3rem' }} onClick={handleClick}>\n      <i className={isFavorite ? 'fas fa-heart' : 'far fa-heart'}></i>\n    </div>\n  );\n};\nexport default FavoritesBtn;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from './actionTypes';\n\nexport const addToFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: city,\n  });\n\nexport const removeFromFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: REMOVE_FROM_FAVORITES,\n    payload: city,\n  });\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport FavoritesBtn from '../Favorites/FavoritesBtn';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nfunction CityWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <WithLoadAndErrorHandler state={cityWeather}>\n      {cityWeather.weather.currentConditions ? (\n        <Container className='position-relative mt-3'>\n          <Row className='h1 justify-content-center position-relative'>{cityWeather.weather.city}</Row>\n          <FavoritesBtn />\n          <CurrentWeather />\n          <Forecast />\n        </Container>\n      ) : (\n        ''\n      )}\n    </WithLoadAndErrorHandler>\n  );\n}\n\nexport default CityWeather;\n","import React from 'react';\n\nimport SearchField from './SearchField';\nimport CityWeather from './CityWeather';\n\nfunction Home() {\n  return (\n    <>\n      <SearchField />\n      <CityWeather />\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport { getWeatherIconSrc } from '../../utils';\nimport { setFavoriteToCityWeather } from '../../store/actions/cityWeather';\nimport { calculateTemperature } from '../../utils';\n\nfunction Favorite({ favorite }) {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const {\n    weather: {\n      city,\n      country,\n      currentConditions: { temperature, icon, text },\n    },\n  } = favorite;\n\n  const handleClick = () => {\n    dispatch(setFavoriteToCityWeather(favorite.weather));\n  };\n\n  return (\n    <LinkContainer to='/home' style={{ cursor: 'pointer' }} onClick={handleClick}>\n      <Card border='light' className='text-center mx-1 favorite' style={{ 'minWidth': '150px', 'maxWidth': '200px' }}>\n        <Card.Body className=\"favorite-card-body\">\n          <Card.Title className=\"favorite-card-item\">{city}, {country}</Card.Title>\n          <Card.Img className=\"favorite-card-item\" style={{ width: 100 }} src={getWeatherIconSrc(icon)}></Card.Img>\n          <Card.Title className=\"favorite-card-item\">{calculateTemperature(temperature, units)}°</Card.Title>\n        </Card.Body>\n      </Card>\n    </LinkContainer>\n  );\n}\n\nexport default Favorite;\n","import React from 'react';\nimport Favorite from './Favorite';\nimport { useSelector } from 'react-redux';\nimport { CardGroup, Jumbotron } from 'react-bootstrap';\n\nimport '../../styles/Favorites.style.css'\n\nfunction Favorites() {\n  const favorites = useSelector((state) => state.favorites);\n\n  return (\n    <>\n      {favorites.length ? (\n        <CardGroup className=\"favorites\">\n          {favorites.map((f) => (\n            <Favorite key={f.weather.id} favorite={f} />\n          ))}\n        </CardGroup>\n      ) : (\n      <h1 className=\"text-center\">\n        No Favorites Yet\n      </h1>\n\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nimport Home from './Home/Home';\nimport Favorites from './Favorites/Favorites';\n\nfunction Routes() {\n  return (\n    <Container style={{ 'maxWidth': '900px', \"marginTop\": \"1rem\" }}>\n      <Switch>\n        <Route exact path={'/home'} component={Home} />\n        <Route exact path='/favorites' component={Favorites} />\n        <Redirect to='/home' component={Home} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CELSIUS, FAHRENHEIT } from '../constants';\nimport { setUnits } from '.././store/actions/units';\nimport { SET_FAHRENHEIT, SET_CELSIUS } from '.././store/actions/actionTypes';\n\nfunction UnitsBtn() {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const ToggleUnits = () => {\n    dispatch(setUnits(units === CELSIUS ? SET_FAHRENHEIT : SET_CELSIUS));\n  };\n  \n  return (\n    <span onClick={ToggleUnits} style={{ cursor: 'pointer', border: '1px solid black' }} className='p-1 position-absolute top-50 end-0'>\n      <span className={units === FAHRENHEIT ? 'text-muted' : ''}>°C</span>\n      <span className='text-muted'> / </span>\n      <span className={units === CELSIUS ? 'text-muted' : ''}>°F</span>\n    </span>\n  );\n}\n\nexport default UnitsBtn;\n","export const setUnits = (type) => (dispatch) => {\n  dispatch({ type });\n};\n","import React, { useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport UnitsBtn from './components/UnitsBtn';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchCityWeather } from '../src/store/actions/cityWeather';\nimport { getLatLon } from './utils';\nimport { getCityByLatLon } from '../src/store/api';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const [lat, lon] = await getLatLon();\n        const { id, city, country } = await getCityByLatLon(lat, lon);\n        // Dummy:\n        // const { id, city, country } = { city: 'Tel Aviv', country: 'Israel', id: '215854' };\n        dispatch(fetchCityWeather(id, city, country));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    init();\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <Container >\n        <Header />\n        <Main />\n      </Container>\n      <UnitsBtn />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  cities: [],\n};\n\nconst citiesAC = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_AC:\n      return { ...state, isLoading: true };\n    case FETCH_CITIES_AC_SUCCESS:\n      return { isLoading: false, cities: action.payload, error: '' };\n    case FETCH_CITIES_AC_FAILURE:\n      return { isLoading: false, weather: [], error: action.payload };\n    case RESET_CITIES_AC:\n      return initialState\n    default:\n      return state;\n  }\n};\n\nexport default citiesAC;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from '../actions/actionTypes';\n\nconst favorites = (favorites = [], action) => {\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      return [...favorites, action.payload] ;\n    case REMOVE_FROM_FAVORITES:\n      return favorites.filter(f => f.weather.id !== action.payload.weather.id)\n    default:\n      return favorites;\n  }\n};\n\nexport default favorites;\n","import { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  weather: {},\n};\n\nconst cityWeather = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITY_WEATHER:\n      return { ...state, isLoading: true };\n    case FETCH_CITY_WEATHER_SUCCESS:\n      return { isLoading: false, weather: action.payload, error: '' };\n    case FETCH_CITY_WEATHER_FAILURE:\n      return { isLoading: false, weather: {}, error: action.payload };\n    case SET_FAVORITE_TO_CITY_WEATHER:\n      return { isLoading: false, weather: action.payload, error: '' };\n    default:\n      return state;\n  }\n};\n\nexport default cityWeather;\n","import { SET_FAHRENHEIT, SET_CELSIUS } from '../actions/actionTypes';\nimport {FAHRENHEIT, CELSIUS} from '../../constants'\n\nconst units = (units = CELSIUS, action) => {\n  switch (action.type) {\n    case SET_CELSIUS:\n      return CELSIUS;\n    case SET_FAHRENHEIT:\n      return FAHRENHEIT;\n    default:\n      return units;\n  }\n};\nexport default units;\n","import { combineReducers } from 'redux'\n\nimport citiesAC from './citiesAC'\nimport favorites from './favorites'\nimport cityWeather from './cityWeather'\nimport units from './units'\n\n\nexport default combineReducers({\n    cityWeather,\n    favorites,\n    citiesAC,\n    units,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './store/reducers';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}