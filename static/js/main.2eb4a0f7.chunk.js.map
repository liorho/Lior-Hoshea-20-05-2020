{"version":3,"sources":["constants/index.js","assets/weather-icon-512.png","store/actions/actionTypes.js","utils/index.js","store/actions/mode.js","components/ModeBtn.js","components/UnitsBtn.js","store/actions/units.js","components/Header.js","api/api.js","utils/mapData.js","api/index.js","store/actions/cityWeather.js","components/common/Loader.js","components/common/Error.js","components/hoc/WithLoadAndErrorHandler.js","components/Home/SearchField.js","store/actions/citiesAC.js","components/common/Temperature.js","components/Home/CurrentWeather.js","components/Home/DayForecast.js","components/Home/Forecast.js","components/Home/FavoritesBtn.js","store/actions/favorites.js","components/Home/CityWeather.js","components/Home/Home.js","components/Favorites/Favorite.js","components/Favorites/Favorites.js","components/Main.js","App.js","serviceWorker.js","store/reducers/citiesAC.js","store/reducers/favorites.js","store/reducers/cityWeather.js","store/reducers/units.js","store/reducers/mode.js","store/reducers/index.js","store/store.js","index.js"],"names":["FAHRENHEIT","CELSIUS","DARK_MODE","LIGHT_MODE","DARK_COLOR","LIGHT_COLOR","DAYS","APP_NAME","DEFAULT_CITY","city","country","id","FETCH_CITY_WEATHER","FETCH_CITY_WEATHER_SUCCESS","FETCH_CITY_WEATHER_FAILURE","FETCH_CITIES_AC","FETCH_CITIES_AC_SUCCESS","FETCH_CITIES_AC_FAILURE","RESET_CITIES_AC","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_FAVORITE_TO_CITY_WEATHER","SET_FAHRENHEIT","SET_CELSIUS","SET_DARK_MODE","SET_LIGHT_MODE","roundTemperature","temperature","Math","round","getWeatherIconSrc","icon","getDayOfTheWeek","date","d","Date","getDay","calculateTemperature","units","getLatLon","a","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","getLocalStorage","currentLocalStorage","localStorage","getItem","JSON","parse","console","log","saveToLocalStorage","state","updatedLocalStorage","setItem","stringify","setMode","type","dispatch","mode","body","document","querySelector","style","backgroundColor","color","ModeBtn","useDispatch","useSelector","className","onClick","UnitsBtn","withRouter","props","location","getNavLinkClass","path","pathname","Navbar","collapseOnSelect","expand","Brand","href","target","src","logo","alt","Toggle","aria-controls","Collapse","Nav","Item","activeKey","to","Link","cities","axios","create","baseURL","currentConditions","fiveDaysForecast","getCityByLatLon","mapCity","Key","LocalizedName","Country","mapCitiesAC","map","mapForecast","forecast","f","min","Temperature","Minimum","Value","max","Maximum","dayIcon","Day","Icon","dayText","IconPhrase","mapCityWeather","currentWeather","LocalObservationDateTime","isDayTime","IsDayTime","Metric","WeatherIcon","text","WeatherText","DailyForecasts","API_KEY","process","_getCurrentWeather","require","cityId","api","get","_getFiveDaysForecast","getCityWeather","all","getCitiesAC","input","lat","lon","data","fetchCityWeather","payload","Loader","Spinner","animation","variant","Error","message","WithLoadAndErrorHandler","isLoading","children","SearchField","useState","setInput","formInput","useRef","citiesAC","useEffect","current","focus","fetchCitiesAC","Form","InputGroup","Prepend","Text","Control","placeholder","onChange","e","setTimeout","value","ref","length","as","multiple","c","CurrentWeather","cityWeather","weather","Row","DayForecast","Card","border","Body","Title","Img","Forecast","CardGroup","i","FavoritesBtn","favorites","isFavorite","some","cursor","fontSize","addToFavorites","CityWeather","Container","Home","Favorite","favorite","setFavoriteToCityWeather","Favorites","Routes","exact","component","App","init","Main","Boolean","window","hostname","match","initialState","action","filter","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eb4a0f7.chunk.js","sourcesContent":["export const FAHRENHEIT = 'FAHRENHEIT';\nexport const CELSIUS = 'CELSIUS';\n\nexport const DARK_MODE = 'DARK_MODE';\nexport const LIGHT_MODE = 'LIGHT_MODE';\nexport const DARK_COLOR = '#212529'\nexport const LIGHT_COLOR = '#FFFFFF'\n\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport const WEBSITE_URL = 'https://github.com/liorho/Lior-Hoshea-20-05-2020'\nexport const APP_NAME = \"weatherly\"\n\nexport const DEFAULT_CITY = { city: 'Tel Aviv', country: 'Israel', id: '215854' }\n\nexport const DELAY_INPUT_FETCH = 800;\n","export default __webpack_public_path__ + \"static/media/weather-icon-512.db9f65c0.png\";","export const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER'\nexport const FETCH_CITY_WEATHER_SUCCESS = 'FETCH_CITY_WEATHER_SUCCESS'\nexport const FETCH_CITY_WEATHER_FAILURE = 'FETCH_CITY_WEATHER_FAILURE'\n\nexport const FETCH_CITIES_AC = 'FETCH_CITIES_AC'\nexport const FETCH_CITIES_AC_SUCCESS = 'FETCH_CITIES_AC_SUCCESS'\nexport const FETCH_CITIES_AC_FAILURE = 'FETCH_CITIES_AC_FAILURE'\nexport const RESET_CITIES_AC = 'RESET_CITIES_AC'\n\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES'\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES'\n\nexport const SET_FAVORITE_TO_CITY_WEATHER = 'SET_FAVORITE_TO_CITY_WEATHER'\n\nexport const SET_FAHRENHEIT = 'SET_FAHRENHEIT'\nexport const SET_CELSIUS = 'SET_CELSIUS'\n\nexport const SET_DARK_MODE = 'SET_DARK_MODE'\nexport const SET_LIGHT_MODE = 'SET_LIGHT_MODE'\n\n\n","import { DAYS, CELSIUS, APP_NAME } from '../constants';\n\nexport const roundTemperature = (temperature) => Math.round(temperature);\n\nexport const getWeatherIconSrc = (icon) => `https://developer.accuweather.com/sites/default/files/${icon >= 10 ? icon : '0' + icon}-s.png`;\n\nexport const getDayOfTheWeek = (date) => {\n  const d = new Date(date);\n  return DAYS[d.getDay()];\n};\n\nexport const calculateTemperature = (temperature, units) => (units === CELSIUS ? temperature : roundTemperature((temperature * 9) / 5 + 32));\n\nexport const getLatLon = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        resolve([position.coords.latitude, position.coords.longitude]);\n      });\n    } else {\n      reject({ error: 'Geolocation is not supported by this browser.' });\n    }\n  });\n};\n\nexport const getLocalStorage = () => {\n  try {\n    const currentLocalStorage = localStorage.getItem(APP_NAME);\n    return currentLocalStorage === null ? {} : JSON.parse(currentLocalStorage);\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n\nexport const saveToLocalStorage = (state) => {\n  try {\n    const currentLocalStorage = getLocalStorage();\n    if (currentLocalStorage) {\n      const updatedLocalStorage = { ...currentLocalStorage, ...state };\n      localStorage.setItem(APP_NAME, JSON.stringify(updatedLocalStorage));\n    }\n  } catch (error) {\n    console.log(error);\n    return undefined;\n  }\n};\n","import { DARK_MODE, LIGHT_MODE, DARK_COLOR, LIGHT_COLOR } from '../../constants'\nimport {SET_DARK_MODE} from '../actions/actionTypes'\nimport {saveToLocalStorage} from '../../utils'\n\nexport const setMode = (type) => (dispatch) => {\n  saveToLocalStorage({ mode: type === SET_DARK_MODE ? DARK_MODE : LIGHT_MODE })\n\n  const body = document.querySelector('body');\n  body.style.backgroundColor = type === SET_DARK_MODE ? DARK_COLOR : LIGHT_COLOR\n  body.style.color = type === SET_DARK_MODE ? LIGHT_COLOR : DARK_COLOR\n\n  dispatch({ type });\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setMode } from '../store/actions/mode'\nimport { SET_DARK_MODE, SET_LIGHT_MODE } from '../store/actions/actionTypes';\nimport { DARK_MODE } from '../constants';\n\nfunction ModeBtn() {\n  const dispatch = useDispatch();\n  const mode = useSelector((state) => state.mode);\n  const toggleMode = () => {\n    dispatch(setMode(mode === DARK_MODE ? SET_LIGHT_MODE : SET_DARK_MODE));\n  };\n  \n  return (\n    <div className='pl-3'>\n    <i onClick={toggleMode} className=\"fas fa-sun mode-btn cursor-pointer \"></i>\n    </div>\n    );\n  }\n\n  export default ModeBtn;","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CELSIUS, FAHRENHEIT } from '../constants';\nimport { setUnits } from '.././store/actions/units';\nimport { SET_FAHRENHEIT, SET_CELSIUS } from '.././store/actions/actionTypes';\n\nfunction UnitsBtn() {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const ToggleUnits = () => {\n    dispatch(setUnits(units === CELSIUS ? SET_FAHRENHEIT : SET_CELSIUS));\n  };\n\n  return (\n      <div onClick={ToggleUnits} className='bg-inherit cursor-pointer'>\n        <span className={units === FAHRENHEIT ? 'text-muted' : 'color-inherit'}>°C</span>\n        <span className='text-muted'> / </span>\n        <span className={units === CELSIUS ? 'text-muted' : 'color-inherit'}>°F</span>\n      </div>\n  );\n}\n\nexport default UnitsBtn;\n","import { CELSIUS, FAHRENHEIT } from '../../constants';\nimport { SET_CELSIUS } from '../actions/actionTypes';\nimport { saveToLocalStorage } from '../../utils';\n\nexport const setUnits = (type) => (dispatch) => {\n  saveToLocalStorage({ units: type === SET_CELSIUS ? CELSIUS : FAHRENHEIT });\n  dispatch({ type });\n};\n","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport { WEBSITE_URL } from '../constants';\nimport logo from '../assets/weather-icon-512.png';\nimport ModeBtn from './ModeBtn';\nimport UnitsBtn from './UnitsBtn';\nimport { DARK_MODE } from '../constants';\n\n\nfunction Header(props) {\n  const { location } = props;\n  const mode = useSelector((state) => state.mode);\n\n  const getNavLinkClass = (path) => {\n    return location.pathname === path ? 'color-inherit' : mode === DARK_MODE ? 'text-muted' : ''\n  }\n\n  return (\n    <Navbar collapseOnSelect expand='sm' className='sticky-top bg-inherit'>\n      <Navbar.Brand href={WEBSITE_URL} target='_blank' className='logo color-inherit'>\n        <img src={logo} className='logo-img' alt='Weatherly logo' /> Weatherly\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls='responsive-navbar-nav' />\n      <Navbar.Collapse id='responsive-navbar-nav'>\n        <Nav.Item className='d-flex justify-content-between w-100'>\n          <Nav activeKey={location.pathname} className='mr-auto'>\n            <LinkContainer to='/home'>\n              <Nav.Link className={getNavLinkClass('/home')}>Home</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to='/favorites'>\n              <Nav.Link className={getNavLinkClass('/favorites')}>Favorites</Nav.Link>\n            </LinkContainer>\n          </Nav>\n          <Nav>\n            <Nav.Item className='py-2'>\n              <UnitsBtn />\n            </Nav.Item>\n            <Nav.Item className='p-2'>\n              <ModeBtn />\n            </Nav.Item>\n          </Nav>\n        </Nav.Item>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default withRouter(Header);\n","import axios from 'axios'\n\nexport const cities = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities',\n})\n\nexport const currentConditions = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/currentconditions/v1',\n})\n\nexport const fiveDaysForecast = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/forecasts/v1/daily/5day',\n})\n\nexport const getCityByLatLon = axios.create({\n  baseURL: 'https://dataservice.accuweather.com/locations/v1/cities/geoposition',\n})","import { roundTemperature } from './index'\n\nexport const mapCity = (city) => {\n  return { id: city.Key, city: city.LocalizedName, country: city.Country.LocalizedName }\n}\n\nexport const mapCitiesAC = (cities) =>\n  cities.map(mapCity);\n\n\nconst mapCurrentConditions = (currentWeather) => {\n  return {\n    date: currentWeather.LocalObservationDateTime,\n    isDayTime: currentWeather.IsDayTime,\n    temperature: roundTemperature(currentWeather.Temperature.Metric.Value),\n    icon: currentWeather.WeatherIcon,\n    text: currentWeather.WeatherText\n  }\n}\n\nconst mapForecast = (forecast) => {\n  return forecast.map(f => {\n    return {\n      date: f.Date,\n      temperature: {\n        min: roundTemperature(f.Temperature.Minimum.Value),\n        max: roundTemperature(f.Temperature.Maximum.Value),\n      },\n      dayIcon: f.Day.Icon,\n      dayText: f.Day.IconPhrase\n  }})\n}\n\nexport const mapCityWeather = (currentConditions, forecast) => {\n  return {\n    currentConditions: mapCurrentConditions(currentConditions),\n    forecast: mapForecast(forecast.DailyForecasts)\n  }\n}\n","import * as api from './api';\nimport { mapCity } from '../utils/mapData';\nimport { getLatLon } from '../utils';\n\nimport { DEFAULT_CITY } from '../constants';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst NODE_ENV = process.env.REACT_APP_NODE_ENV;\n\n// Dummy Data -->\nconst dummyTelAutoComplete = require('../data-samples/telAutoComplete.json');\nconst dummyTelAvivCurrent = require('../data-samples/telAvivCurrent.json');\nconst dummyTelAvivForecast = require('../data-samples/telAvivForecast.json');\n// <--\n\nconst _getCurrentWeather = (cityId) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAvivCurrent } : api.currentConditions.get(`/${cityId}?apikey=${API_KEY}`);\n};\nconst _getFiveDaysForecast = (cityId) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAvivForecast } : api.fiveDaysForecast.get(`/${cityId}?apikey=${API_KEY}&metric=true`);\n};\nexport const getCityWeather = async (cityId) => await Promise.all([_getCurrentWeather(cityId), _getFiveDaysForecast(cityId)]);\n\nexport const getCitiesAC = async (input) => {\n  return NODE_ENV === 'DEVELOPMENT' ? { data: dummyTelAutoComplete } : await api.cities.get(`autocomplete?apikey=${API_KEY}&q=${input}`);\n};\nexport const getCityByLatLon = async () => {\n  if (NODE_ENV === 'DEVELOPMENT') {\n    return DEFAULT_CITY;\n  } else {\n    try {\n      const [lat, lon] = await getLatLon();\n      const { data } = await api.getCityByLatLon.get(`search?apikey=${API_KEY}&q=${lat},${lon}`);\n      return mapCity(data);\n    } catch (error) {\n      console.log(error);\n      return DEFAULT_CITY;\n    }\n  }\n};\n","import * as api from '../../api';\nimport { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from './actionTypes';\nimport { mapCityWeather } from '../../utils/mapData';\n\nexport const fetchCityWeather = ({id, city, country}) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITY_WEATHER,\n  });\n  try {\n    const [currentConditions, fiveDaysForecast] = await api.getCityWeather(id);\n    dispatch({\n      type: FETCH_CITY_WEATHER_SUCCESS,\n      payload: { ...mapCityWeather(currentConditions.data[0], fiveDaysForecast.data), id, city, country },\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITY_WEATHER_FAILURE,\n      payload: error,\n    });\n  }\n};\n\nexport const setFavoriteToCityWeather = (city) => (dispatch) =>\n  dispatch({\n    type: SET_FAVORITE_TO_CITY_WEATHER,\n    payload: city,\n  });\n","import React from 'react';\nimport {Spinner} from 'react-bootstrap'\n\nconst Loader = () => <Spinner className=\"d-flex mx-auto justify-content-center m-3\" animation=\"border\" variant=\"secondary\" />\n\nexport default Loader;\n","import React from 'react';\n\nconst Error = ({message}) => <p>Error: {message}. Please try again later.</p>;\n\nexport default Error;\n","import React from 'react';\nimport Loader from '../common/Loader';\nimport Error from '../common/Error';\n\nconst WithLoadAndErrorHandler = (props) => <>{props.state.error ? <Error message={props.state.error.message}/> : props.state.isLoading ? <Loader /> : props.children}</>;\n\nexport default WithLoadAndErrorHandler;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {DELAY_INPUT_FETCH} from '../../constants'\nimport { fetchCityWeather } from '../../store/actions/cityWeather';\nimport { fetchCitiesAC, resetCitiesAC } from '../../store/actions/citiesAC';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\n\n\nfunction SearchField() {\n  const [input, setInput] = useState('');\n  const formInput = useRef('');\n  const citiesAC = useSelector((state) => state.citiesAC);\n  const dispatch = useDispatch();\n\n  const handleSelect = (e) => {\n    const city = JSON.parse(e.target.value);\n    dispatch(fetchCityWeather(city));\n    setInput('');\n    formInput.current.value = '';\n    dispatch(resetCitiesAC());\n  };\n\n  const handleChange = (e) => {\n    setTimeout(() => setInput(e.target.value), DELAY_INPUT_FETCH);\n  };\n\n  useEffect(() => formInput.current.focus(), [dispatch]);\n\n  useEffect(() => {\n    if (input !== '') dispatch(fetchCitiesAC(input));\n  }, [dispatch, input]);\n\n  return (\n    <Form className='justify-content-center w50 position-relative'>\n      <InputGroup >\n        <InputGroup.Prepend>\n          <InputGroup.Text>🔍</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control placeholder='Search City' onChange={handleChange} ref={formInput} className=\"abort-input-default\" />\n      </InputGroup>\n\n      <WithLoadAndErrorHandler state={citiesAC}>\n        {citiesAC.cities?.length && input ? (\n          <Form.Control  as='select' multiple onChange={handleSelect} className='position-absolute z-1'>\n              {citiesAC.cities?.map((c) => (\n                <option className=\"cursor-pointer\" key={c.id} value={JSON.stringify(c)}>\n                  {c.city}, {c.country}\n                </option>\n              ))}\n          </Form.Control>\n        ) : (\n          ''\n        )}\n      </WithLoadAndErrorHandler>\n    </Form>\n  );\n}\n\nexport default SearchField;\n","import * as api from '../../api';\nimport { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from './actionTypes';\nimport { mapCitiesAC } from '../../utils/mapData';\n\nexport const fetchCitiesAC = (input) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITIES_AC,\n  });\n  try {\n    const { data } = await api.getCitiesAC(input);\n    dispatch({\n      type: FETCH_CITIES_AC_SUCCESS,\n      payload: mapCitiesAC(data),\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITIES_AC_FAILURE,\n      payload: error,\n    });\n  }\n};\n\nexport const resetCitiesAC = () => (dispatch) => dispatch({ type: RESET_CITIES_AC });\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport {calculateTemperature} from '../../utils';\n\nfunction Temperature({ temperature }) {\n  const units = useSelector((state) => state.units);\n  return <span>{calculateTemperature(temperature, units)}°</span>;\n}\n\nexport default Temperature;\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport Temperature from '../common/Temperature';\n\nfunction CurrentWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather.currentConditions ? (\n        <>\n          <Row className='justify-content-center'>{cityWeather.weather.currentConditions.text}</Row>\n          <Row className='text-center font-6'>\n            <Temperature temperature={cityWeather.weather.currentConditions.temperature} />\n          </Row>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { getWeatherIconSrc, getDayOfTheWeek } from '../../utils';\n\nimport Temperature from '../common/Temperature';\n\nfunction DayForecast({ forecast }) {\n  const { date, temperature, dayIcon } = forecast;\n\n  return (\n\n    <Card border='light' className='text-center m-1 bg-inherit border w-100'>\n      <Card.Body className='weather-card-body '>\n        <Card.Title className='weather-card-item'>{getDayOfTheWeek(date)}</Card.Title>\n        <Card.Img src={getWeatherIconSrc(dayIcon)} className='weather-card-item img' ></Card.Img>\n        <Card.Title className='weather-card-item'>\n          <Temperature temperature={temperature?.min} /> - <Temperature temperature={temperature?.max} />\n        </Card.Title>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default DayForecast;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardGroup } from 'react-bootstrap';\n\nimport DayForecast from './DayForecast';\n\nfunction Forecast() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather?.forecast ? (\n        <CardGroup className='weather-cards-container bg-inherit'>\n          {cityWeather.weather.forecast.map((f, i) => (\n            <DayForecast key={i} forecast={f} />\n          ))}\n        </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addToFavorites, removeFromFavorites } from '../../store/actions/favorites';\n\nconst FavoritesBtn = () => {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const favorites = useSelector((state) => state.favorites);\n  const dispatch = useDispatch();\n  const isFavorite = favorites?.some((f) => f.weather.id === cityWeather.weather.id);\n\n  const handleClick = () => {\n    isFavorite ? dispatch(removeFromFavorites(cityWeather)) : dispatch(addToFavorites(cityWeather));\n  };\n  return (\n    <div className='position-absolute top-0 end-0' style={{ cursor: 'pointer', fontSize: '3rem' }} onClick={handleClick}>\n      <i className={isFavorite ? 'fas fa-heart' : 'far fa-heart'}></i>\n    </div>\n  );\n};\nexport default FavoritesBtn;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from './actionTypes';\n\nexport const addToFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: city,\n  });\n\nexport const removeFromFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: REMOVE_FROM_FAVORITES,\n    payload: city,\n  });\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport FavoritesBtn from './FavoritesBtn';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nfunction CityWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <WithLoadAndErrorHandler state={cityWeather}>\n      {cityWeather.weather.currentConditions ? (\n        <Container className='position-relative mt-3'>\n          <Row className='justify-content-center position-relative bg-inherit font-2'>{cityWeather.weather.city}</Row>\n          <FavoritesBtn />\n          <CurrentWeather />\n\n          <Forecast />\n        </Container>\n      ) : (\n        ''\n      )}\n    </WithLoadAndErrorHandler>\n  );\n}\n\nexport default CityWeather;\n","import React from 'react';\n\nimport SearchField from './SearchField';\nimport CityWeather from './CityWeather';\n\nfunction Home() {\n  return (\n    <>\n      <SearchField />\n      <CityWeather />\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport { getWeatherIconSrc } from '../../utils';\nimport { setFavoriteToCityWeather } from '../../store/actions/cityWeather';\nimport Temperature from '../common/Temperature'\n\nfunction Favorite({ favorite }) {\n  const dispatch = useDispatch();\n\n  const {\n    weather: {\n      city,\n      country,\n      currentConditions: { temperature, icon },\n    },\n  } = favorite;\n\n  const handleClick = () => {\n    dispatch(setFavoriteToCityWeather(favorite.weather));\n  };\n\n  return (\n    <LinkContainer to='/home' onClick={handleClick}>\n      <Card className='text-center m-1 weather-card cursor-pointer bg-inherit border'>\n        <Card.Body className=\"weather-card-body\">\n          <Card.Title className=\"weather-card-item\">{city}, {country}</Card.Title>\n          <Card.Img className=\"weather-card-item img\" src={getWeatherIconSrc(icon)}></Card.Img>\n          <Card.Title className=\"weather-card-item\"><Temperature temperature= {temperature} /></Card.Title>\n        </Card.Body>\n      </Card>\n    </LinkContainer>\n  );\n}\n\nexport default Favorite;\n","import React from 'react';\nimport Favorite from './Favorite';\nimport { useSelector } from 'react-redux';\nimport { CardGroup } from 'react-bootstrap';\n\nfunction Favorites() {\n  const favorites = useSelector((state) => state.favorites);\n\n  return (\n    <>\n      {favorites.length ? (\n        <>\n          <h1 className='text-center'>Your Favorites</h1>\n          <CardGroup className='weather-cards-container'>\n            {favorites.map((f) => (\n              <Favorite key={f.weather.id} favorite={f} />\n            ))}\n          </CardGroup>\n        </>\n      ) : (\n        <h1 className='text-center'>No Favorites Yet</h1>\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nimport Home from './Home/Home';\nimport Favorites from './Favorites/Favorites';\n\nfunction Routes() {\n  return (\n    <Container className=\"bg-inherit main\">\n      <Switch>\n        <Route exact path={'/home'} component={Home} />\n        <Route exact path='/favorites' component={Favorites} />\n        <Redirect to='/home' component={Home} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default Routes;\n","import React, { useEffect } from 'react';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchCityWeather } from '../src/store/actions/cityWeather';\nimport { setMode } from '../src/store/actions/mode';\nimport { getCityByLatLon } from './api';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const mode = useSelector((state) => state.mode);\n\n  useEffect(() => {\n    const init = async () => {\n      dispatch(fetchCityWeather(await getCityByLatLon()));\n      dispatch(setMode('SET_' + mode));\n    };\n    init();\n  }, [dispatch, mode]);\n\n  return (\n    <Router>\n      <Container className='bg-inherit color-inherit app'>\n        <Header />\n        <Main />\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  cities: [],\n};\n\nconst citiesAC = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_AC:\n      return { ...state, isLoading: true };\n    case FETCH_CITIES_AC_SUCCESS:\n      return { isLoading: false, cities: action.payload, error: '' };\n    case FETCH_CITIES_AC_FAILURE:\n      return { isLoading: false, weather: [], error: action.payload };\n    case RESET_CITIES_AC:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default citiesAC;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from '../actions/actionTypes';\n\nconst favorites = (state = [], action) => {\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      return [action.payload, ...state ];\n    case REMOVE_FROM_FAVORITES:\n      return state.filter((f) => f.weather.id !== action.payload.weather.id);\n    default:\n      return state;\n  }\n};\n\nexport default favorites;\n","import { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  weather: {},\n};\n\nconst cityWeather = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITY_WEATHER:\n      return { ...state, isLoading: true };\n    case FETCH_CITY_WEATHER_SUCCESS:\n      return { isLoading: false, weather: action.payload, error: '' };\n    case FETCH_CITY_WEATHER_FAILURE:\n      return { isLoading: false, weather: {}, error: action.payload };\n    case SET_FAVORITE_TO_CITY_WEATHER:\n      return { isLoading: false, weather: action.payload, error: '' };\n    default:\n      return state;\n  }\n};\n\nexport default cityWeather;\n","import { SET_FAHRENHEIT, SET_CELSIUS } from '../actions/actionTypes';\nimport {FAHRENHEIT, CELSIUS } from '../../constants'\nimport {getLocalStorage} from '../../utils'\n\nconst initialState = getLocalStorage()?.units ? getLocalStorage().units : CELSIUS\n\nconst units = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CELSIUS:\n      return CELSIUS;\n    case SET_FAHRENHEIT:\n      return FAHRENHEIT;\n    default:\n      return state;\n  }\n};\nexport default units;\n","import { SET_DARK_MODE, SET_LIGHT_MODE } from '../actions/actionTypes';\nimport {DARK_MODE, LIGHT_MODE } from '../../constants'\nimport {getLocalStorage} from '../../utils'\n\nconst initialState = getLocalStorage()?.mode ? getLocalStorage().mode : DARK_MODE\n\nconst mode = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_LIGHT_MODE:\n      return LIGHT_MODE;\n    case SET_DARK_MODE:\n      return DARK_MODE;\n    default:\n      return state;\n  }\n};\nexport default mode;\n","import { combineReducers } from 'redux'\n\nimport citiesAC from './citiesAC'\nimport favorites from './favorites'\nimport cityWeather from './cityWeather'\nimport units from './units'\nimport mode from './mode'\n\n\nexport default combineReducers({\n    cityWeather,\n    favorites,\n    citiesAC,\n    units,\n    mode\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\nexport const store = createStore(reducers, compose(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './custom.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}