{"version":3,"sources":["constants/index.js","assets/weather-icon-512.png","components/Header.js","store/utils/mapCitiesAC.js","store/api/api.js","store/actions/actionTypes.js","utils/index.js","store/utils/mapCityWeather.js","store/actions/cityWeather.js","store/actions/citiesAC.js","components/common/Loader.js","components/common/Error.js","components/hoc/WithLoadAndErrorHandler.js","components/Home/SearchField.js","components/Home/CurrentWeather.js","components/Home/DayForecast.js","components/Home/Forecast.js","components/Favorites/FavoritesBtn.js","store/actions/favorites.js","components/Home/CityWeather.js","components/Home/Home.js","components/Favorites/Favorite.js","components/Favorites/Favorites.js","components/Main.js","components/UnitsBtn.js","store/actions/units.js","App.js","serviceWorker.js","store/reducers/citiesAC.js","store/reducers/favorites.js","store/reducers/cityWeather.js","store/reducers/units.js","store/reducers/index.js","index.js"],"names":["FAHRENHEIT","CELSIUS","DAYS","withRouter","props","location","Navbar","className","style","Brand","href","target","src","logo","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","activeKey","pathname","to","Link","mapCity","axios","create","baseURL","city","Key","LocalizedName","country","Country","mapCitiesAC","cities","map","FETCH_CITY_WEATHER","FETCH_CITY_WEATHER_SUCCESS","FETCH_CITY_WEATHER_FAILURE","FETCH_CITIES_AC","FETCH_CITIES_AC_SUCCESS","FETCH_CITIES_AC_FAILURE","RESET_CITIES_AC","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","SET_FAVORITE_TO_CITY_WEATHER","SET_FAHRENHEIT","SET_CELSIUS","roundTemperature","temperature","Math","round","getWeatherIconSrc","icon","getDayOfTheWeek","date","d","Date","getDay","calculateTemperature","units","getLatLon","a","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","mapForecast","forecast","f","min","Temperature","Minimum","Value","max","Maximum","dayIcon","Day","Icon","dayText","IconPhrase","mapCityWeather","currentConditions","currentWeather","LocalObservationDateTime","isDayTime","IsDayTime","Metric","WeatherIcon","text","WeatherText","DailyForecasts","dummyCurrentConditions","require","dummyForecast","fetchCityWeather","dispatch","type","payload","console","log","message","dummyCities","Loader","Spinner","animation","variant","Error","Jumbotron","WithLoadAndErrorHandler","state","isLoading","children","SearchField","useState","input","setInput","formInput","useRef","citiesAC","useSelector","useDispatch","useEffect","current","focus","Form","InputGroup","Prepend","Text","Control","placeholder","onChange","e","setTimeout","value","ref","outline","length","as","multiple","JSON","parse","c","stringify","CurrentWeather","cityWeather","weather","Row","fontSize","DayForecast","Card","border","Body","Title","Img","Forecast","CardGroup","i","FavoritesBtn","favorites","isFavorite","some","cursor","onClick","addToFavorites","CityWeather","Container","Home","Favorite","favorite","setFavoriteToCityWeather","Favorites","Routes","exact","path","component","UnitsBtn","App","init","Main","Boolean","window","hostname","match","initialState","action","filter","combineReducers","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bfe4e33.chunk.js","sourcesContent":["export const FAHRENHEIT = 'FAHRENHEIT';\nexport const CELSIUS = 'CELSIUS';\nexport const DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const WEBSITE_URL = 'https://github.com/liorho/Lior-Hoshea-20-05-2020'","export default __webpack_public_path__ + \"static/media/weather-icon-512.db9f65c0.png\";","import React from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { withRouter } from 'react-router';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport {WEBSITE_URL} from '../constants'\nimport logo from '../assets/weather-icon-512.png';\n\nfunction Header(props) {\n  const { location } = props;\n\n  return (\n    <Navbar className='mx-auto sticky-top' style={{\"backgroundColor\": \"white\"}}>\n      <Navbar.Brand href={WEBSITE_URL} target='_blank'>\n        <img src={logo} style={{width: \"2rem\", height: \"2rem\"}} className='d-inline-block align-top' alt='Weatherly logo' /> Weatherly\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls='basic-navbar-nav' />\n      <Navbar.Collapse id='basic-navbar-nav' />\n      <Nav activeKey={location.pathname} className='ml-auto'>\n        <LinkContainer to='/home'>\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to='/favorites'>\n          <Nav.Link>Favorites</Nav.Link>\n        </LinkContainer>\n      </Nav>\n    </Navbar>\n  );\n  // width='30' height='30'\n}\n\nexport default withRouter(Header);\n","export const mapCity = (city) => {\n  return { id: city.Key, city: city.LocalizedName, country: city.Country.LocalizedName }\n}\n\nexport const mapCitiesAC = (cities) =>\n  cities.map(mapCity);\n","import axios from 'axios'\n\nexport const cities = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/locations/v1/cities',\n})\n\nexport const currentConditions = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/currentconditions/v1',\n})\n\nexport const fiveDaysForecast = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/forecasts/v1/daily/5day',\n})\n\nexport const getCityByLatLon = axios.create({\n  baseURL: 'http://dataservice.accuweather.com/locations/v1/cities/geoposition',\n})","export const FETCH_CITY_WEATHER = 'FETCH_CITY_WEATHER'\nexport const FETCH_CITY_WEATHER_SUCCESS = 'FETCH_CITY_WEATHER_SUCCESS'\nexport const FETCH_CITY_WEATHER_FAILURE = 'FETCH_CITY_WEATHER_FAILURE'\n\nexport const FETCH_CITIES_AC = 'FETCH_CITIES_AC'\nexport const FETCH_CITIES_AC_SUCCESS = 'FETCH_CITIES_AC_SUCCESS'\nexport const FETCH_CITIES_AC_FAILURE = 'FETCH_CITIES_AC_FAILURE'\nexport const RESET_CITIES_AC = 'RESET_CITIES_AC'\n\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES'\nexport const REMOVE_FROM_FAVORITES = 'REMOVE_FROM_FAVORITES'\n\nexport const SET_FAVORITE_TO_CITY_WEATHER = 'SET_FAVORITE_TO_CITY_WEATHER'\n\nexport const SET_FAHRENHEIT = 'SET_FAHRENHEIT'\nexport const SET_CELSIUS = 'SET_CELSIUS'\n\n\n","import { DAYS, CELSIUS } from '../constants';\n\nexport const roundTemperature = (temperature) => Math.round(temperature);\n\nexport const getWeatherIconSrc = (icon) => `https://developer.accuweather.com/sites/default/files/${icon >= 10 ? icon : '0' + icon}-s.png`;\n\n// export const getCityPicSrc = (cityName) => `https://api.teleport.org/api/urban_areas/slug:${cityName}/images`;\n\nexport const getDayOfTheWeek = (date) => {\n  const d = new Date(date);\n  return DAYS[d.getDay()];\n};\n\nexport const calculateTemperature = (temperature, units) => (units === CELSIUS ? temperature : roundTemperature((temperature * 9) / 5 + 32));\n\nexport const getLatLon = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        resolve([position.coords.latitude, position.coords.longitude]);\n      });\n    } else {\n      reject({ error: 'Geolocation is not supported by this browser.' });\n    }\n  });\n};\n","import {roundTemperature} from '../../utils'\n\nconst mapCurrentConditions = (currentWeather) => {\n  return {\n    date: currentWeather.LocalObservationDateTime,\n    isDayTime: currentWeather.IsDayTime,\n    temperature: roundTemperature(currentWeather.Temperature.Metric.Value),\n    icon: currentWeather.WeatherIcon,\n    text: currentWeather.WeatherText\n  }\n}\n\nconst mapForecast = (forecast) => {\n  return forecast.map(f => {\n    return {\n      date: f.Date,\n      temperature: {\n        min: roundTemperature(f.Temperature.Minimum.Value),\n        max: roundTemperature(f.Temperature.Maximum.Value),\n      },\n      dayIcon: f.Day.Icon,\n      dayText: f.Day.IconPhrase\n  }})\n}\n\nexport const mapCityWeather = (currentConditions, forecast) => {\n  return {\n    currentConditions: mapCurrentConditions(currentConditions),\n    forecast: mapForecast(forecast.DailyForecasts)\n  }\n}\n","import * as api from '../api';\nimport { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from './actionTypes';\nimport { mapCityWeather } from '../utils/mapCityWeather';\n\n// dummy\nlet dummyCurrentConditions = require('../../data-samples/telAvivCurrent.json');\nconst dummyForecast = require('../../data-samples/telAvivForecast.json');\ndummyCurrentConditions = dummyCurrentConditions[0];\n// dummy\n\nexport const fetchCityWeather = (id, city, country) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITY_WEATHER,\n  });\n  try {\n    // const [currentConditions, fiveDaysForecast] = await api.getCityWeather(id);\n    dispatch({\n      type: FETCH_CITY_WEATHER_SUCCESS,\n      // payload: { ...mapCityWeather(currentConditions.data[0], fiveDaysForecast.data), id, city, country },\n\n      // dummy:\n      payload: { ...mapCityWeather(dummyCurrentConditions, dummyForecast), id, city, country },\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITY_WEATHER_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const setFavoriteToCityWeather = (city) => (dispatch) =>\n  dispatch({\n    type: SET_FAVORITE_TO_CITY_WEATHER,\n    payload: city,\n  });\n","import * as api from '../api';\nimport { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from './actionTypes';\nimport { mapCitiesAC } from '../utils/mapCitiesAC';\nconst dummyCities = require('../../data-samples/telAutoComplete.json');\n\nexport const fetchCitiesAC = (input) => async (dispatch) => {\n  dispatch({\n    type: FETCH_CITIES_AC,\n  });\n  try {\n    // const {data} = await api.getCitiesAC(input);\n    const data = dummyCities;\n    dispatch({\n      type: FETCH_CITIES_AC_SUCCESS,\n      payload: mapCitiesAC(data),\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: FETCH_CITIES_AC_FAILURE,\n      payload: error.message,\n    });\n  }\n};\n\nexport const resetCitiesAC = () => (dispatch) => dispatch({ type: RESET_CITIES_AC });\n","import React from 'react';\nimport {Spinner} from 'react-bootstrap'\n\nconst Loader = () => <Spinner className=\"mx-auto\" animation=\"border\" variant=\"secondary\" />\n\nexport default Loader;\n","import React from 'react';\nimport { Jumbotron } from 'react-bootstrap';\n\nfunction Error() {\n  return (\n    <Jumbotron>\n      <h1>This is an Error Message</h1>\n      <p>There has been some kind of problem while trying to handle your request.</p>\n      <p>Please try again later.</p>\n    </Jumbotron>\n  );\n}\n\nexport default Error;\n","import React from 'react';\nimport Loader from '../common/Loader';\nimport Error from '../common/Error';\n\nconst WithLoadAndErrorHandler = (props) => <>{props.state.error ? <Error /> : props.state.isLoading ? <Loader /> : props.children}</>;\n\nexport default WithLoadAndErrorHandler;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchCityWeather } from '../../store/actions/cityWeather';\nimport { fetchCitiesAC, resetCitiesAC } from '../../store/actions/citiesAC';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nconst DELAY = 800;\n\nfunction SearchField() {\n  const [input, setInput] = useState('');\n  const formInput = useRef('');\n  const citiesAC = useSelector((state) => state.citiesAC);\n  const dispatch = useDispatch();\n\n  const handleSelect = (e) => {\n    const { id, city, country } = JSON.parse(e.target.value);\n    dispatch(fetchCityWeather(id, city, country));\n    setInput('');\n    formInput.current.value = '';\n    dispatch(resetCitiesAC());\n  };\n\n  const handleChange = (e) => {\n    setTimeout(() => setInput(e.target.value), DELAY);\n  };\n\n  useEffect(() => formInput.current.focus(), [dispatch]);\n\n  useEffect(() => {\n    if (input !== '') dispatch(fetchCitiesAC(input));\n  }, [dispatch, input]);\n\n  return (\n    <Form className='justify-content-center w50'>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>🔍</InputGroup.Text>\n        </InputGroup.Prepend>\n        <Form.Control placeholder='Search City' onChange={handleChange} ref={formInput} style={{ outline: 'none !important', 'boxShadow': 'none' }} />\n      </InputGroup>\n\n      <WithLoadAndErrorHandler state={citiesAC}>\n        {citiesAC.cities.length ? (\n          <Form.Control as='select' multiple onChange={handleSelect}>\n            {citiesAC.cities?.map((c) => (\n              <option key={c.id} value={JSON.stringify(c)}>\n                {c.city}, {c.country}\n              </option>\n            ))}\n          </Form.Control>\n        ) : (\n          ''\n        )}\n      </WithLoadAndErrorHandler>\n    </Form>\n  );\n}\n\nexport default SearchField;\n","import React from 'react';\nimport { Row } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\n\nimport { calculateTemperature } from '../../utils'\n\nfunction CurrentWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const units = useSelector(state => state.units)\n\n  return (\n    <>\n      {cityWeather.weather.currentConditions ? (\n        <>\n            <Row className='justify-content-center'>{cityWeather.weather.currentConditions.text}</Row>\n            <Row className='justify-content-center' style={{fontSize: \"7rem\"}}>{calculateTemperature(cityWeather.weather.currentConditions.temperature, units)}°</Row>\n        </>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default CurrentWeather;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useSelector } from 'react-redux';\nimport { getWeatherIconSrc, getDayOfTheWeek, calculateTemperature } from '../../utils';\n\nfunction DayForecast({ forecast }) {\n  const { date, temperature, dayIcon, dayText } = forecast;\n  const units = useSelector((state) => state.units);\n\n  return (\n      <Card border=\"light\" className='text-center mx-1 day-forecast-card' >\n        <Card.Body className=\"day-forecast-card-body\">\n          <Card.Title className=\"day-forecast-card-item\">{getDayOfTheWeek(date)}</Card.Title>\n          <Card.Img style={{ width: \"6rem\" }} src={getWeatherIconSrc(dayIcon)} className=\"day-forecast-card-item\"></Card.Img>\n          <Card.Title className=\"day-forecast-card-item\">\n            {calculateTemperature(temperature?.min, units)}° - {calculateTemperature(temperature?.max, units)}°\n          </Card.Title>\n        </Card.Body>\n    </Card>\n  );\n}\n\nexport default DayForecast;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardGroup,Container, Row, CardDeck, CardColumns } from 'react-bootstrap';\n\nimport '../../styles/Forecast.style.css'\nimport DayForecast from './DayForecast';\n\nfunction Forecast() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <>\n      {cityWeather.weather?.forecast ? (\n\n        <CardGroup className=\"forecast\">\n          {cityWeather.weather.forecast.map((f, i) => (\n            <DayForecast key={i} forecast={f} />\n          ))}\n          </CardGroup>\n      ) : (\n        ''\n      )}\n    </>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addToFavorites, removeFromFavorites } from '../../store/actions/favorites';\n\nconst FavoritesBtn = () => {\n  const cityWeather = useSelector((state) => state.cityWeather);\n  const favorites = useSelector((state) => state.favorites);\n  const dispatch = useDispatch();\n  const isFavorite = favorites?.some((f) => f.weather.id === cityWeather.weather.id);\n\n  const handleClick = () => {\n    isFavorite ? dispatch(removeFromFavorites(cityWeather)) : dispatch(addToFavorites(cityWeather));\n  };\n  return (\n    <div className='position-absolute top-0 end-0' style={{ cursor: 'pointer', fontSize: '3rem' }} onClick={handleClick}>\n      <i className={isFavorite ? 'fas fa-heart' : 'far fa-heart'}></i>\n    </div>\n  );\n};\nexport default FavoritesBtn;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from './actionTypes';\n\nexport const addToFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: ADD_TO_FAVORITES,\n    payload: city,\n  });\n\nexport const removeFromFavorites = (city) => (dispatch) =>\n  dispatch({\n    type: REMOVE_FROM_FAVORITES,\n    payload: city,\n  });\n","import React from 'react';\nimport { Container, Row } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport FavoritesBtn from '../Favorites/FavoritesBtn';\nimport WithLoadAndErrorHandler from '../hoc/WithLoadAndErrorHandler';\n\nfunction CityWeather() {\n  const cityWeather = useSelector((state) => state.cityWeather);\n\n  return (\n    <WithLoadAndErrorHandler state={cityWeather}>\n      {cityWeather.weather.currentConditions ? (\n        <Container className='position-relative mt-3'>\n          <Row className='h1 justify-content-center position-relative'>{cityWeather.weather.city}</Row>\n          <FavoritesBtn />\n          <CurrentWeather />\n          <Forecast />\n        </Container>\n      ) : (\n        ''\n      )}\n    </WithLoadAndErrorHandler>\n  );\n}\n\nexport default CityWeather;\n","import React from 'react';\n\nimport SearchField from './SearchField';\nimport CityWeather from './CityWeather';\n\nfunction Home() {\n  return (\n    <>\n      <SearchField />\n      <CityWeather />\n    </>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport { getWeatherIconSrc } from '../../utils';\nimport { setFavoriteToCityWeather } from '../../store/actions/cityWeather';\nimport { calculateTemperature } from '../../utils';\n\nfunction Favorite({ favorite }) {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const {\n    weather: {\n      city,\n      country,\n      currentConditions: { temperature, icon, text },\n    },\n  } = favorite;\n\n  const handleClick = () => {\n    dispatch(setFavoriteToCityWeather(favorite.weather));\n  };\n\n  return (\n    <LinkContainer to='/home' style={{ cursor: 'pointer' }} onClick={handleClick}>\n      <Card border='light' className='text-center mx-1 favorite' style={{ 'minWidth': '150px', 'maxWidth': '200px' }}>\n        <Card.Body className=\"favorite-card-body\">\n          <Card.Title className=\"favorite-card-item\">{city}, {country}</Card.Title>\n          <Card.Img className=\"favorite-card-item\" style={{ width: 100 }} src={getWeatherIconSrc(icon)}></Card.Img>\n          <Card.Title className=\"favorite-card-item\">{calculateTemperature(temperature, units)}°</Card.Title>\n        </Card.Body>\n      </Card>\n    </LinkContainer>\n  );\n}\n\nexport default Favorite;\n","import React from 'react';\nimport Favorite from './Favorite';\nimport { useSelector } from 'react-redux';\nimport { CardGroup, Jumbotron } from 'react-bootstrap';\n\nimport '../../styles/Favorites.style.css'\n\nfunction Favorites() {\n  const favorites = useSelector((state) => state.favorites);\n\n  return (\n    <>\n      {favorites.length ? (\n        <CardGroup className=\"favorites\">\n          {favorites.map((f) => (\n            <Favorite key={f.weather.id} favorite={f} />\n          ))}\n        </CardGroup>\n      ) : (\n      <h1 className=\"text-center\">\n        No Favorites Yet\n      </h1>\n\n      )}\n    </>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nimport Home from './Home/Home';\nimport Favorites from './Favorites/Favorites';\n\nfunction Routes() {\n  return (\n    <Container style={{ 'maxWidth': '900px', \"marginTop\": \"1rem\" }}>\n      <Switch>\n        <Route exact path={'/home'} component={Home} />\n        <Route exact path='/favorites' component={Favorites} />\n        <Redirect to='/home' component={Home} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { CELSIUS, FAHRENHEIT } from '../constants';\nimport { setUnits } from '.././store/actions/units';\nimport { SET_FAHRENHEIT, SET_CELSIUS } from '.././store/actions/actionTypes';\n\nfunction UnitsBtn() {\n  const dispatch = useDispatch();\n  const units = useSelector((state) => state.units);\n\n  const ToggleUnits = () => {\n    dispatch(setUnits(units === CELSIUS ? SET_FAHRENHEIT : SET_CELSIUS));\n  };\n  \n  return (\n    <span onClick={ToggleUnits} style={{ cursor: 'pointer', border: '1px solid black' }} className='p-1 position-absolute top-50 end-0'>\n      <span className={units === FAHRENHEIT ? 'text-muted' : ''}>°C</span>\n      <span className='text-muted'> / </span>\n      <span className={units === CELSIUS ? 'text-muted' : ''}>°F</span>\n    </span>\n  );\n}\n\nexport default UnitsBtn;\n","export const setUnits = (type) => (dispatch) => {\n  dispatch({ type });\n};\n","import React, { useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport UnitsBtn from './components/UnitsBtn';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchCityWeather } from '../src/store/actions/cityWeather';\nimport { getLatLon } from './utils';\nimport { getCityByLatLon } from '../src/store/api';\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const [lat, lon] = await getLatLon();\n        // const { id, city, country } = await getCityByLatLon(lat, lon);\n        //dummy:\n        const { id, city, country } = { city: 'Tel Aviv', country: 'Israel', id: '215854' };\n        dispatch(fetchCityWeather(id, city, country));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    init();\n  }, [dispatch]);\n\n  return (\n    <Router>\n      <Container >\n        <Header />\n        <Main />\n      </Container>\n      <UnitsBtn />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import { FETCH_CITIES_AC, FETCH_CITIES_AC_SUCCESS, FETCH_CITIES_AC_FAILURE, RESET_CITIES_AC } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  cities: [],\n};\n\nconst citiesAC = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITIES_AC:\n      return { ...state, isLoading: true };\n    case FETCH_CITIES_AC_SUCCESS:\n      return { isLoading: false, cities: action.payload, error: '' };\n    case FETCH_CITIES_AC_FAILURE:\n      return { isLoading: false, weather: [], error: action.payload };\n    case RESET_CITIES_AC:\n      return initialState\n    default:\n      return state;\n  }\n};\n\nexport default citiesAC;\n","import { ADD_TO_FAVORITES, REMOVE_FROM_FAVORITES } from '../actions/actionTypes';\n\nconst favorites = (favorites = [], action) => {\n  switch (action.type) {\n    case ADD_TO_FAVORITES:\n      return [...favorites, action.payload] ;\n    case REMOVE_FROM_FAVORITES:\n      return favorites.filter(f => f.weather.id !== action.payload.weather.id)\n    default:\n      return favorites;\n  }\n};\n\nexport default favorites;\n","import { FETCH_CITY_WEATHER, FETCH_CITY_WEATHER_SUCCESS, FETCH_CITY_WEATHER_FAILURE, SET_FAVORITE_TO_CITY_WEATHER } from '../actions/actionTypes';\n\nconst initialState = {\n  isLoading: false,\n  error: '',\n  weather: {},\n};\n\nconst cityWeather = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_CITY_WEATHER:\n      return { ...state, isLoading: true };\n    case FETCH_CITY_WEATHER_SUCCESS:\n      return { isLoading: false, weather: action.payload, error: '' };\n    case FETCH_CITY_WEATHER_FAILURE:\n      return { isLoading: false, weather: {}, error: action.payload };\n    case SET_FAVORITE_TO_CITY_WEATHER:\n      return { isLoading: false, weather: action.payload, error: '' };\n    default:\n      return state;\n  }\n};\n\nexport default cityWeather;\n","import { SET_FAHRENHEIT, SET_CELSIUS } from '../actions/actionTypes';\nimport {FAHRENHEIT, CELSIUS} from '../../constants'\n\nconst units = (units = CELSIUS, action) => {\n  switch (action.type) {\n    case SET_CELSIUS:\n      return CELSIUS;\n    case SET_FAHRENHEIT:\n      return FAHRENHEIT;\n    default:\n      return units;\n  }\n};\nexport default units;\n","import { combineReducers } from 'redux'\n\nimport citiesAC from './citiesAC'\nimport favorites from './favorites'\nimport cityWeather from './cityWeather'\nimport units from './units'\n\n\nexport default combineReducers({\n    cityWeather,\n    favorites,\n    citiesAC,\n    units,\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './store/reducers';\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}